/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
/////
/////            DIRECT COMPUTATION OF STABILITY thRESHOLD FOR 2D FLOW
/////
/////		Adapted for usage with matlab driver by D. Fabre, july 2017
/////
/////		NEEDS SOME CLEAN-UP !
/////
/////  this program should be rewritten in the same way as HarmonicBalance_2D.edp
/////
/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//load "iovtk"                      //////// library to write vtk files
//load "BinaryIO"                //////// library to read/write binary files 
// load "BinaryIO_64"
//load "UMFPACK64"        ////////  load sparsesolver    
//load "MUMPS_seq"
include "Macros_StabFem.edp";



mesh th=readmesh(ffdatadir+"mesh.msh");                    ///// Read mesh

/////////////////////////////////////////////////////////////////////////////////

fespace Xh(th,P2);             ////// f.e. space for vel.
fespace Mh(th,P1);            ////// f.e. space for pressure
fespace XXMh(th,[P2,P2,P1]); ////// f.e. space for triplet [u,v,p]
fespace BIGSPACE(th,[P2,P2,P1,P2,P2,P1,P2,P2,P1]);

XXMh [ub1s,ub2s,pbs]; // base flow (start) 
XXMh<complex> [um1s,um2s,pms];    //eigenmode (start)      

//BIGSPACE [u1b,u2b,pb,u1mr,u2mr,pmr,u1mi,u2mi,pmi]; // baseflow, eigenmode_re, eigenmode_im
//BIGSPACE [du1b,du2b,dpb,du1mr,du2mr,dpbmr,du1mi,du2mi,dpbmi]; // increments in Newton
//BIGSPACE [v1b,v2b,qb,v1mr,v2mr,qmr,v1mi,v2mi,qmi]; // test functions

XXMh [u1b,u2b,pb],[u1mr,u2mr,pmr],[u1mi,u2mi,pmi];
XXMh [du1b,du2b,dpb],[du1mr,du2mr,dpbmr],[du1mi,du2mi,dpbmi]; // increments in Newton
XXMh [v1b,v2b,qb], [v1mr,v2mr,qmr], [v1mi,v2mi,qmi];


real Re, ReM, dRe;
real omega, omegaM, sigmaM, domega;
     
//XXMh<complex> [u1m,u2m,pm];

//XXMh [v1,v2,q];                 ///////  -> test for Navier-Stokes
//XXMh [Ub1,Ub2,Pb];          ///////  -> Base Flow


/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////  
/////////////////////////////////////////////////////////////////////////////
//cout << " -.-.-.-.-.-.-.-. info -.-.-.-.-.-.-.-.-.-" << endl;
//cout << " nb of degree of freedom : " << XXMh.ndof << endl;
//cout << " nb of Triangles: " << th.nt << endl;
//cout << " nb of Vertices: " << th.nv << endl;
//cout << " -.-.-.-.-.-.-.-._________-.-.-.-.-.-.-.-." << endl;
/////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

macro div(u1,u2) (dx(u1)+dy(u2)) //
macro grad(u1,u2) [dx(u1),dy(u2)] //
macro ugrad(u1,u2,v) (u1*dx(v)+u2*dy(v)) //
macro Ugrad(u1,u2,v1,v2) [ugrad(u1,u2,v1),ugrad(u1,u2,v2)] //
macro Conv(ua1,ua2,ub1,ub2,v1,v2) (Ugrad(ua1,ua2,ub1,ub2)'*[v1,v2]+Ugrad(ub1,ub2,ua1,ua2)'*[v1,v2]) // convection operator
macro Diffusion(nu,u1,u2,v1,v2)  (-(nu)*( dx(u1)*dx(v1)+dy(u1)*dy(v1)+dx(u2)*dx(v2)+dy(u2)*dy(v2))) // integration by parts of nu (v.Delta u) 

macro Boundaryconditions(u1,u2,v1,v2,symmetry)
	           on(bcinlet,u1=0.0,u2=0.0) 
             + on(bcwall,u1=0.0,u2=0.0)
             + int1d(th,bcaxis)(u1*v1*1e30*(symmetry=="A")+u2*v2*1e30*(symmetry=="S"))
// 

macro Lift(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.y)
	+int1d(th,2,21,22,23)( -2*nu*(2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
//

real eps=1.e-7; 
       

/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
///////////  Load baseflow and eigenmode  for starting point     ////////////////////////
{
ifstream cbin(ffdatadir+"BaseFlow_guess.txt");
cbin >> ub1s[] >> Re;
}

{
		cout << "starting  from mode in file Eigenmode_guess.txt" << endl;
		ifstream cbin(ffdatadir+"Eigenmode_guess.txt");
		cbin >> um1s[] >> ReM >> sigmaM >> omegaM; 
		complex liftnorm = Lift(1/Re,um1s,um2s,pms);
		um1s[] = .5/liftnorm*um1s[]; // normalize so that lift is 0.5
};
cout << " Reading baseflow and mode with Re = " << Re << " ; sigma = " << sigmaM << " ; omega = " << omegaM << endl;

//[u1b,u2b,pb,u1mr,u2mr,pmr,u1mi,u2mi,pmi] = [ub1s, ub2s, pbs, real(um1s), real(um2s), real(pms), imag(um1s), imag(um2s), imag(pms)]; 

[u1b,u2b,pb] = [ub1s, ub2s, pbs]; 
[u1mr,u2mr,pmr] = [real(um1s), real(um2s), real(pms)]; 
[u1mi,u2mi,pmi] = [imag(um1s), imag(um2s), imag(pms)]; 

real[int] X, Xf, RHS;
//BIGSPACE [RHSF1, RHSF2, RHSF3, RHSF4, RHSF5, RHSF6, RHSF7, RHSF8, RHSF9];

real NLOpF4,NLOpF5;
X  = [u1b[], Re, omega];
omega = omegaM;
Re = ReM;

////////////////////////////////////////////////////////////////////////////////
//
// In description, the blocks are called NxM, where N is the numering of the equation and M that of the unknown
// N = 1 steady NS for base flow ; N=2 real part of linear equation for eigenmode ; N = 3 imaginary part; N = 4 and 5 normalization  
// M = 1 base-flow, M=2 eigenmode-real ; M = 3 eigenmode-imag ; M = 4 domega ; M=4 dRe 
//
// in the assembly blocks [1-3]x[1-3]  corresponding to the fluid unknows are built with varfs NLOpF and LinOpFF 
//
/////////////////////////////////////////////////////////////////////////////////

cout << " Taille du probleme : " << u1b[].n+2 << endl;

/////////////////////////////////////////////////////////////////////////////////
//////// varf for RHS 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for nonlinear term..." << endl;
varf NLOpF1([du1b,du2b,dpb],[v1b,v2b,qb]) =
// block 1-1 : NS for base flow
   int2d(th)( Diffusion(1/Re,u1b,u2b,v1b,v2b)
             + pb*div(v1b,v2b)
             - div(u1b,u2b)*qb
             - .5*Conv(u1b,u2b,u1b,u2b,v1b,v2b)
             )
 			+ Boundaryconditions(du1b,du2b,v1b,v2b,"S");
 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf NLOpF2([du1mr,du2mr,dpbmr],[v1mr,v2mr,qmr]) =
	 int2d(th)( 
                  -Conv(u1b,u2b,u1mr,u2mr,v1mr,v2mr)
             )
// block 2-2 : Stokes operator on real part of eigenmode             
           + int2d(th)( Diffusion(1/Re,u1mr,u2mr,v1mr,v2mr)
             + pmr*div(v1mr,v2mr)
             - div(u1mr,u2mr)*qmr
             )
 			+ Boundaryconditions(du1mr,du2mr,v1mr,v2mr,"A")
// block 2-3 : effect of omega on real part of equation for eigenmode
			+ int2d(th)(omega*(u1mi*v1mr+u2mi*v2mr));
			
// block 3-1 : base-flow effect on real part of eigenmode	
varf NLOpF3([du1mi,du2mi,dpbmi],[v1mi,v2mi,qmi]) =		
	  int2d(th)( 
                  - Conv(u1b,u2b,u1mi,u2mi,v1mi,v2mi)
              )   
// block 3-2 : effect of omega on real part of equation for eigenmode
			+ int2d(th)(-omega*(u1mr*v1mi+u2mr*v2mi)) 			
// block 3-3 : Stokes operator on real part of eigenmode             
           + int2d(th)( Diffusion(1/Re,u1mi,u2mi,v1mi,v2mi)
             + pmi*div(v1mi,v2mi)
             - div(u1mi,u2mi)*qmi
             )
 			+ Boundaryconditions(du1mi,du2mi,v1mi,v2mi,"A")
 			;

// blocks 4 and 5 : normalisation of eigenmode by lift=1
// NLOpF4 = Lift(1/Re,u1mr,u2mr,pmr)-1; 
// NLOpF5 = Lift(1/Re,u1mi,u2mi,pmi)-0; 	
// these have to be defined later, when assemblying the matrix		
cout << " defining operators for nonlinear term... done" << endl;

	







/////////////////////////////////////////////////////////////////////////////////
//////// varf for Linear part 

////////////////////////////////////////////////////////////////////////////////////

cout << " defining operators for linear term..." << endl;
// block 1-1 : NS for base flow
varf LinOp11([du1b,du2b,dpb],[v1b,v2b,qb]) =
   int2d(th)( Diffusion(1/Re,du1b,du2b,v1b,v2b)
             + dpb*div(v1b,v2b)
             - div(du1b,du2b)*qb
             - Conv(u1b,u2b,du1b,du2b,v1b,v2b)
             )
 			+ Boundaryconditions(du1b,du2b,v1b,v2b,"S");
 			
// block 1-4 : effect of dRe on base-flow equations
varf LinOp14([du1b,du2b,dpb],[v1b,v2b,qb])
	= int2d(th)(Diffusion(-1/Re^2,u1b,u2b,v1b,v2b));

 			
// block 2-1 : base-flow effect on real part of eigenmode			
varf LinOp21([du1b,du2b,dpb],[v1mr,v2mr,qmr]) =
	 int2d(th)( 
                  - Conv(du1b,du2b,u1mr,u2mr,v1mr,v2mr)
             );
             
// block 2-2 : Stokes operator on real part of eigenmode             
varf LinOp22([du1mr,du2mr,dpmr],[v1mr,v2mr,qmr]) =
             int2d(th)( Diffusion(1/Re,du1mr,du2mr,v1mr,v2mr)
             + dpmr*div(v1mr,v2mr)
             - div(du1mr,du2mr)*qmr
             - Conv(u1b,u2b,du1mr,du2mr,v1mr,v2mr)
             )
 			+ Boundaryconditions(du1mr,du2mr,v1mr,v2mr,"A");
 			
// block 2-3 : effect of omega on real part of equation for eigenmode
varf LinOp23([du1mi,du2mi,dpmi],[v1mr,v2mr,qmr]) =
			 int2d(th)(omega*(du1mi*v1mr+du2mi*v2mr));

// block 2-4 : effect of dRe on eigenmode-imag equations
varf LinOp24([du1b,du2b,dpb],[v1mr,v2mr,qmr])
	= int2d(th)(Diffusion(-1/Re^2,u1mr,u2mr,v1mr,v2mr));

// block 2-5 : effect of domega on eigenmode-real equations
varf LinOp25([du1b,du2b,dpb],[v1mr,v2mr,qmr])
	=  int2d(th)(u1mi*v1mr+u2mi*v2mr);


// block 3-1 : base-flow effect on real part of eigenmode			
varf LinOp31([du1b,du2b,dpb],[v1mi,v2mi,qmi]) =
	 int2d(th)( 
                  - Conv(du1b,du2b,u1mi,u2mi,v1mi,v2mi)
              );
              
// block 3-2 : effect of omega on real part of equation for eigenmode
varf LinOp32([du1mr,du2mr,dpmr],[v1mi,v2mi,qmi]) =
			 int2d(th)(-omega*(du1mr*v1mi+du2mr*v2mi));
			 			
// block 3-3 : Stokes operator on real part of eigenmode             
varf LinOp33([du1mi,du2mi,dpmi],[v1mi,v2mi,qmi]) =
             int2d(th)( Diffusion(1/Re,du1mi,du2mi,v1mi,v2mi)
           - Conv(u1b,u2b,du1mi,du2mi,v1mi,v2mi)
             + dpmi*div(v1mi,v2mi)
             - div(du1mi,du2mi)*qmi
             )
 			+ Boundaryconditions(du1mi,du2mi,v1mi,v2mi,"A")
 			;

// block 3-4 : effect of dRe on eigenmode-imag equations
varf LinOp34([du1b,du2b,dpb],[v1mi,v2mi,qmi])
	= int2d(th)(Diffusion(-1/Re^2,u1mi,u2mi,v1mi,v2mi));		
	
// block 3-5 : effect of domega on eigenmode-imag equations
varf LinOp35([du1b,du2b,dpb],[v1mi,v2mi,qmi])
	= int2d(th)(-(u1mr*v1mi+u2mr*v2mi));

// block 4-2 : lift of real part of eigenmode-re
varf LinOp42([v1b,v2b,qb],[du1mr,du2mr,dpmr])	
	= Lift(1/Re,du1mr,du2mr,dpmr);
	
// block 5-3 : lift of real part of eigenmode-re
varf LinOp53([v1b,v2b,qb],[du1mi,du2mi,dpmi])	
	= Lift(1/Re,du1mi,du2mi,dpmi);

//real LinOp44 = Lift(-1/Re^2,u1mr,u2mr,0);
//real LinOp54 = Lift(-1/Re^2,u1mi,u2mi,0);
//matrix LinOp = [[matLinOpFF, matLinOpF4,matLinOpF5], [matLinOp4F',0, LinOp45],[matLinOp5F',0, LinOp45]];
cout << " defining operators for linear term... done" << endl;




///// BEGINING OF NEWTON LOOP
domega = 1;

int i=1;
while(abs(domega)>1e-8&&abs(domega)<10)
	{ 
	cout << "Newton loop step " << i << endl;

	cout << "constructing rhs... " << i << endl;
	real[int] RHSF1(u1b[].n), RHSF2(u1b[].n), RHSF3(u1b[].n); 
	RHSF1 = NLOpF1(0,XXMh);
	RHSF2 = NLOpF2(0,XXMh);
	RHSF3 = NLOpF3(0,XXMh);	
	NLOpF4 = Lift(1/Re,u1mr,u2mr,pmr)-0.5; 
	NLOpF5 = Lift(1/Re,u1mi,u2mi,pmi)-0; 	
	RHS = [RHSF1, RHSF2, RHSF3, NLOpF4, NLOpF5];		
	cout <<  "max RHS : " << RHSF1.l2 <<  ", " << RHSF2.l2 <<  ", " << RHSF3.l2 <<  ", " << NLOpF4 <<  ", " << NLOpF5 << endl;  

	cout << "dimensions of the operator and of the RHS : " << RHS.n <<  endl;

cout << " Assembling matrix..." << endl;
matrix matLinOp11 = LinOp11(XXMh,XXMh);
real[int] matLinOp14 = LinOp14(0,XXMh);

matrix matLinOp21 = LinOp21(XXMh,XXMh);
matrix matLinOp22 = LinOp22(XXMh,XXMh);
matrix matLinOp23 = LinOp23(XXMh,XXMh);
real[int] matLinOp24 = LinOp24(0,XXMh);
real[int] matLinOp25 = LinOp25(0,XXMh);

matrix matLinOp31 = LinOp31(XXMh,XXMh);
matrix matLinOp32 = LinOp32(XXMh,XXMh);
matrix matLinOp33 = LinOp33(XXMh,XXMh);
real[int] matLinOp34 = LinOp34(0,XXMh);
real[int] matLinOp35 = LinOp35(0,XXMh);			


real[int] matLinOp42 = LinOp42(0,XXMh);
real[int] matLinOp53 = LinOp53(0,XXMh);

real LinOp44 = Lift(-1/Re^2,u1mr,u2mr,0);
real LinOp54 = Lift(-1/Re^2,u1mi,u2mi,0);


matrix LinOp = [	[matLinOp11, 	0, 			0,	  matLinOp14, 	  0    ],
					[matLinOp21,matLinOp22,matLinOp23,matLinOp24, matLinOp25 ],
					[matLinOp31,matLinOp32,matLinOp33,matLinOp34, matLinOp35 ],
					[	0	   ,matLinOp42',	    0,	LinOp44, 	0 ],
					[	0	   ,	0		,matLinOp53',  LinOp54,	0  ]	  
				  ];
cout << " Assembling matrix... done" << endl;

cout << " LU-ing matrix..." << endl;
set(LinOp,solver=sparsesolver);
cout << " Preconditioning matrix... done" << endl;



	cout << " solving BIG problem..." << endl;
	real[int] dX(LinOp.n);
	dX = LinOp^-1*RHS;
	[du1b[], du1mr[], du1mi[], dRe, domega] = dX;
	u1b[] -= du1b[];
	u1mr[] -= du1mr[];
	u1mi[] -= du1mi[];
	Re -= dRe;
	omega -= domega;

	cout << "dRe ; domega : " << -dRe << " " << -domega << endl;
	
	IFMACRO(FREEFEMPLOTS,YES)
	plot(du1b,value=1,wait=1);
	ENDIFMACRO
	
	i++;
	};
	
	if(abs(domega)>10) 
	{
	ofstream file("ffdatadir+BaseFlow_threshold.ff2m");
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	cout << " Newton Loop DIVERGED " << endl;	
	}
	
	else
	
	{
	
	cout << " Newton Loop converged " << endl;
	cout << " >>> Rec = " << Re << endl;
	cout << " >>> Omegac = " << omega << endl;	






/// GENERATES OUTPUT FILES


real nu=1/Re;

{ofstream file(ffdatadir+"BaseFlow_threshold.txt");
		  file << u1b[]; 
		  file << endl << endl << Re;
}; 

XXMh [ubbx,ubby,ubbp] = [u1b,u2b,pb]; // ugly fix
 cout << "Writing base flow in file BaseFlow_threshold.ff2m" << endl;
 SFWriteBaseFlow(ffdatadir+"BaseFlow_threshold.ff2m",ubb,"BaseFlow",i);





    {
    	cout << um2s(1,1) << " " << um1s(1,1) << endl;
    ofstream file(ffdatadir+"Eigenmode_threshold.txt");
    [um1s,um2s,pms] = [u1mr+1i*u1mi,u2mr+1i*u2mi,pmr+1i*pmi]; 
  	file << um1s[] ;	
   	file << endl << endl << Re << endl
   	<< endl << 0 << endl << omega  << endl;
    }
	fespace p1(th,P1); 
	p1 xx,yy;
	xx=x;
	yy=y;
    p1<complex> ux1,uy1,pp1,vort1;

XXMh<complex> [umm1x,umm1y,umm1p] = [um1s,um2s,pms]; // ugly fix

 	 cout << "Writing eigenmode in file Eigenmode_threshold.ff2m" << endl;
//     SFWriteMode(ffdatadir+"Eigenmode_threshold.ff2m",um1s,um2s,pms,1i*omega,1i*omega,"EigenModeD",i)
 		string namefileFF=ffdatadir+"Eigenmode_threshold.ff2m";
 		string typeDA = "D";

 		SFWriteMode(namefileFF,umm1,1i*omega,1i*omegaM,"EigenMode"+typeDA,i); 
 		

	};
	cout << "	===> FindThreshold2D.edp correctly ended" << endl << endl;




