function meshstruct = importFFmesh(fileToRead1,opt)
global ff ffdir ffdatadir sfdir verbosity

%  function importFFmesh
%  Imports mesh generated by freefem 
%  Usage : 
% 1/ mesh=importFFmesh(fileToRead1) -> imports information for points & triangles
% 2/ mesh=importFFmesh(fileToRead1,'seg') -> imports information for points, triangles & SEGMENTS (VERY INEFFICIENT, SHOULD BE IMPROVED)
%
% FileToRead1 is typically of the form "mesh.msh".
% The program will also need files "mesh.ff2m" and "SF_Init.ff2m"
%
%  This program was originally adapted from FreeFem_to_matlab, copyright Julien Dambrine 2010 ; 
%  modified by D. Fabre (2017) ; and redesigned in 2018 with help of M. Chloros


% Check for the mesh file which should be in the ffdatadir directory
if(exist([ffdatadir,fileToRead1])==2) 
    fileToRead1 = [ffdatadir,fileToRead1];
end

%First, read auxiliary files "mesh.ff2m" and "SF_Init.ff2m"
[filepath,name,ext] = fileparts(fileToRead1);
fileToRead2 = [filepath,'/',name,'.ff2m'];
fileToRead3 = [filepath,'/SF_Init.ff2m'];

mydisp(2,['FUNCTION  importFFmesh.m : reading complementary files']);
    
meshstruct = importFFdata(fileToRead2,fileToRead3);

% change the field "datatype" to "problemtype" (to be rationalized ?)
meshstruct.problemtype = meshstruct.datatype;
meshstruct = rmfield(meshstruct,'datatype');

%
meshstruct.meshgeneration=0;

%Reading mesh file
  
    fid=fopen(fileToRead1,'r');
    if fid < 0
      error('Error in importFFmesh : cannot open file');
    end
    fline = fgetl(fid);
    dimension=numel(strsplit(strtrim(fline),' '))-1;
    if(verbosity>2)
    fprintf('mesh_format_FF; dimension=%i\n',dimension);
    end
      frewind(fid);
      if ~(dimension==2)
           error('only supported dimension is 2');
      end
      %start over
      headerline=textscan(fid,'%f %f %f',1,'Delimiter','\n');
      %n vertex
      nv=headerline{1};
      %n triangle
      nt=headerline{2};
      %n edges
      ns=headerline{3};
      tmp=textscan(fid,repmat('%f ',[1, 3]),nv,'Delimiter','\n');
      %vertex coordinates [x,y] and boundary label
      points=cell2mat(tmp)';
      %triangle definition - vertex numbers (counter clock wise) and region label
      tmp=textscan(fid,repmat('%f ',[1, 4]),nt,'Delimiter','\n');
      tri=cell2mat(tmp)';
      %boundary definition
      tmp=textscan(fid,repmat('%f ',[1, 3]),ns,'Delimiter','\n');
      bounds=cell2mat(tmp)';
      fclose(fid);
      if(verbosity>2)
      fprintf('nvertex:%i ntriangle:%i nboundary:%i\n',nv,nt,ns);
      fprintf('NaNs %i %i %i\n',any(any(isnan(points))),any(any(isnan(tri))),any(any(isnan(bounds))));
      fprintf('sizes %ix%i %ix%i %ix%i\n',size(points),size(tri),size(bounds));
      end
              


meshstruct.points = points;
meshstruct.tri = tri;
meshstruct.seg = [];
meshstruct.bounds = bounds;
meshstruct.filename = fileToRead1;
%meshstruct.problemtype=meshstruct.datatype;
%meshstruct = rmfield(meshstruct,'datatype');

 meshstruct.np = nv;

%if(np~=meshstruct.np) error('ERROR in importFFmesh.m : np in .msh and .ff2m files incompabible');
    
    
%[filepath,name,ext] = fileparts(fileToRead1);
%fileToRead2 = [filepath,'/',name,'.ff2m'];

%    mesh1.np = np;
%    meshstruct = importFFmesh(mesh1,fileToRead2);
%    meshstruct = rmfield(meshstruct,'mesh');
    % Nb this is ugly programming. to be rationalized in next version
%end


%    rawData2 = importdata([ fileToRead1 'info'] );
%    problem=rawData2.textdata{3};
%    meshstruct.problemtype=problem;
%    header = rawData2.textdata{5};
%    description=textscan(header,'%s');
%    for ii = 1:length(rawData2.data);
%        description{1}{ii};
%        meshstruct=setfield(meshstruct,description{1}{ii},rawData2.data(ii));
%    end



mydisp(2,['END FUNCTION importFFmesh.m'])
end
