


// OUTILS ET MACROS POUR LA GEOMETRIE DE LA SURFACE LIBRE
//
// script a inclure dans le code principal juste apres une declaration des maillages : 
//
//	MeshInt = maillage principal 
// 	(axe en x=r=0, label 1)
// 	(surface libre label 2)
// 	(parois solides label 5 et 6)
//	(reserver le label 3 pour un plan de symetrie)
// 
//      MeshForSurf = emptymesh construit sur le précédent
//
// Attention : ne pas mettre de commentaires au milieu des macros !



////////////////////////////////////////////////////////////////
//
// CHAPITRE 0 : DECLARATIONS
//
////////////////////////////////////////////////////////////////




int isplot = 1;


fespace Wh1(MeshForSurf,P1);
Wh1 N0r,N0z,T0r,T0z,K0a,K0b,test,NormN;
fespace Vh(MeshInt,P1);

fespace PP1(MeshForSurf,P1);
//fespace PP0(MeshForSurf,P0);

int nbboundaryelements = MeshForSurf.nbe;


int[int]  IndexPointSurf(nbboundaryelements+1); // Index du sommet numero k sur la surface
int[int]  IndexTriSurf(nbboundaryelements); // Index du TRIANGLE auquel appartient le segment k

real[int] xPointSurf(nbboundaryelements+1); // position du point numero k (numbered [0:Nsurface] )
real[int] yPointSurf(nbboundaryelements+1);
real[int] S0PointSurf(nbboundaryelements+1);

real[int] dS0SegSurf(nbboundaryelements); // dS for segment number k (numbered [0:Nsurface-1] )
real[int] alphaSegSurf(nbboundaryelements); // alpha(k) at center of segment (numbered [0:Nsurface-1] )

real[int] alphaPointSurf(nbboundaryelements+1); // alpha(k) at Point 
real[int] K0aPointSurf(nbboundaryelements+1);
real[int] K0bPointSurf(nbboundaryelements+1);


int Nsurface;



////////////////////////////////////////////////////////////////
//
// CHAPITRE 1 : OUTILS POUR CALCULER LES NORMALES ET COURBURES
//
////////////////////////////////////////////////////////////////


// Macros : derivees curvilignes le long de la surface pour un scalaire et un vecteur


macro DsP0(u1)
(-dx(u1)*N.y+dy(u1)*N.x)
//EOM

macro DsP1(u1)
(dx(u1)*T0r+dy(u1)*T0z)
//end of macro



macro Ds(u1)
(dx(u1)*T0r+dy(u1)*T0z)
//end of macro



macro Ds2(u1,u2)
[Ds(u1),Ds(u2)]'*[N.y,-N.x]
// 

macro Ds2var(u1,u2)
[Dsvar(u1),Dsvar(u2)]'*[T0r,T0z]
// 

//macro Ds2var(u1,u2)
//[dx(u1)*T0r+dy(u1)*T0z,dx(u2)*T0r+dy(u2)*T0z]'*[T0r,T0z]
// 

macro Dn(u1)
(dx(u1)*N0r+dy(u1)*N0z)
//








////////////////////////////////////////////////////////////////
//
// CHAPITRE 2 : OUTILS POUR EXTRACTION DE VALEURS LE LONG DE LA SURFACE
//
////////////////////////////////////////////////////////////////



 
macro SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface)
/* This macro constructs arrays of dimension [0 - NSurface] giving the positions of the points along the surface */
/* useful to reconstruct piecewise-linear functions in curvilinear cooordinates (P1 lineic) */
{
int ksurf = 0;
if(surfaceorder=="direct")
{
for(int k=0;k<nbboundaryelements;k++)
{
	if(MeshForSurf.be(k).label==labelsurf) 
	{
	if (ksurf==0){IndexPointSurf(ksurf) = MeshForSurf.be(k)[0];}
	else{if(IndexPointSurf(ksurf) !=MeshForSurf.be(k)[0]){cout << "WARNING probleme numeration de la surface !" << endl;}}
	IndexPointSurf(ksurf+1) = MeshForSurf.be(k)[1];	
	ksurf++;
	}
	IndexTriSurf(ksurf) = MeshForSurf.be(k).Element;	
};
}
else if(surfaceorder=="reverse") /* to be used for tests but this is not the best convention ! (fits with the previous version of matlab) */
{
for(int k=nbboundaryelements;k>0;k--)
{
	if(MeshForSurf.be(k).label==labelsurf) 
	{
	if (ksurf==0){IndexPointSurf(ksurf) = MeshForSurf.be(k)[1];}
	else{if(IndexPointSurf(ksurf) !=MeshForSurf.be(k)[1]){cout << "WARNING probleme numeration de la surface !" << endl;}}
	IndexPointSurf(ksurf+1) = MeshForSurf.be(k)[0];	
	ksurf++;
	}
	IndexTriSurf(ksurf) = MeshForSurf.be(k).Element;	
};
};

/* construction des tableaux xPointSurf,yPointSufr,ds0SeqSurf,s0PointSurf */
Nsurface = ksurf; 
for(ksurf=0;ksurf<Nsurface+1;ksurf++)
  {
	xPointSurf(ksurf) = MeshForSurf(IndexPointSurf(ksurf)).x;
	yPointSurf(ksurf) = MeshForSurf(IndexPointSurf(ksurf)).y;
	if(ksurf==0) 
	    {S0PointSurf(0)=0;}
	 else
	 	{ 
		dS0SegSurf(ksurf-1) = sqrt((xPointSurf(ksurf-1)-xPointSurf(ksurf))^2+(yPointSurf(ksurf-1)-yPointSurf(ksurf))^2);  
		S0PointSurf(ksurf) = S0PointSurf(ksurf-1)+ dS0SegSurf(ksurf-1);
	    };
  };
}
//EOM
 
macro CalcGeomPointSurf(alphaPointSurf,K0aPointSurf,K0bPointSurf)
/* This macro computes the geometry of the free surface : angle alpha(s), and curvature K0a(s) and K0b(s) */
/* These quantities are stored in arrays of dimension [0 - Nsurface] (values at the points).*/
{
	for(int ksurf=0;ksurf<Nsurface;ksurf++)
	{
		if(anglecut==0)
		{   alphaSegSurf(ksurf) = atan2(yPointSurf(ksurf+1)-yPointSurf(ksurf),xPointSurf(ksurf+1)-xPointSurf(ksurf));   }
		else if(anglecut==1)
		{   alphaSegSurf(ksurf) = pi/2-atan2(xPointSurf(ksurf+1)-xPointSurf(ksurf),yPointSurf(ksurf+1)-yPointSurf(ksurf));   } 
		else if(anglecut==2)
		{   alphaSegSurf(ksurf) = pi+atan2(-(yPointSurf(ksurf+1)-yPointSurf(ksurf)),-(xPointSurf(ksurf+1)-xPointSurf(ksurf))); }
		else if(anglecut==3)
		{	alphaSegSurf(ksurf) = -pi/2-atan2(-(xPointSurf(ksurf+1)-xPointSurf(ksurf)),-(yPointSurf(ksurf+1)-yPointSurf(ksurf)));   };
	};	
	for(int ksurf=1;ksurf<Nsurface;ksurf++)
	  {
	  alphaPointSurf(ksurf) = (dS0SegSurf(ksurf)*alphaSegSurf(ksurf-1)+dS0SegSurf(ksurf-1)*alphaSegSurf(ksurf))
	                    /(dS0SegSurf(ksurf-1)+dS0SegSurf(ksurf));/*-pi/2;*/
	                    
	  K0aPointSurf(ksurf) = (alphaSegSurf(ksurf)-alphaSegSurf(ksurf-1))/((dS0SegSurf(ksurf)+dS0SegSurf(ksurf-1))/2);
	  K0bPointSurf(ksurf) = sin(alphaPointSurf(ksurf))/xPointSurf(ksurf);
	  };                 

/* cas des points extremes : a rationaliser */
          if(typestart=="pined")
	  { alphaPointSurf(0)=2*alphaPointSurf(1)-alphaPointSurf(2);
	     K0aPointSurf(0)=2*K0aPointSurf(1)-K0aPointSurf(2);
	     K0bPointSurf(0)=2*K0bPointSurf(1)-K0bPointSurf(2);
	  }
	      else if(typestart=="plane")
          { 
          alphaPointSurf(0) = pi/2;
	      real r1 = yPointSurf(1)-yPointSurf(0);
	      real r2 = yPointSurf(2)-yPointSurf(0);
          K0aPointSurf(0)=(r2^2*K0aPointSurf(1)-r1^2*K0aPointSurf(2))/(r2^2-r1^2);
	      K0bPointSurf(0)=K0aPointSurf(0);
          cout << "toto " << alphaPointSurf(0) << endl;
          }
          else if(typestart=="axis")
          { 
          alphaPointSurf(0) = 0;
	      real r1 = xPointSurf(1);
	      real r2 = xPointSurf(2);
          K0aPointSurf(0)=(r2^2*K0aPointSurf(1)-r1^2*K0aPointSurf(2))/(r2^2-r1^2);
	      K0bPointSurf(0)=K0aPointSurf(0);
 /*Essayer de remplacer par  K0aPointSurf(0) = 2/dS0SegSurf(0)*alphaSegSurf(0);*/
          cout << "toto " << alphaPointSurf(0) << endl;
          }
          else if(typestart=="angle")
	  {  alphaPointSurf(0)=2*alphaPointSurf(1)-alphaPointSurf(2);
	     K0aPointSurf(0)=2*K0aPointSurf(1)-K0aPointSurf(2);
	     K0bPointSurf(0)=2*K0bPointSurf(1)-K0bPointSurf(2);
          };
         
          if(typeend=="pined")
	  	  { 
	  alphaPointSurf(Nsurface)=2*alphaPointSurf(Nsurface-1)-alphaPointSurf(Nsurface-2);
	  K0aPointSurf(Nsurface)=2*K0aPointSurf(Nsurface-1)-K0aPointSurf(Nsurface-2);
	  K0bPointSurf(Nsurface)=2*K0bPointSurf(Nsurface-1)-K0bPointSurf(Nsurface-2);
          }
          else if(typeend=="axis")
          { 
          alphaPointSurf(Nsurface) = pi;
	  real r1 = xPointSurf(Nsurface-1);
	  real r2 = xPointSurf(Nsurface-2);
           K0bPointSurf(Nsurface)=(r2^2*K0bPointSurf(Nsurface-1)-r1^2*K0bPointSurf(Nsurface-2))/(r2^2-r1^2);
	  K0aPointSurf(Nsurface)=K0bPointSurf(Nsurface);
          /*Essayer de remplacer par  K0aPointSurf(Nsurface-1) = 2/dS0SegSurf(Nsurface-1)*(pi-alphaSegSurf(Nsurface-1)); 
           ou autre methode equivalente mais qui marchera quelque soit la determination de alpha :  K0aPointSurf(Nsurface-1) = -2/dS0SegSurf(Nsurface-1)*sin(alphaSegSurf(Nsurface-1)); 
	  K0aPointSurf(Nsurface)=(r2if(typestart=="angle")
	  {  alphaPointSurf(0)=2*alphaPointSurf(1)-alphaPointSurf(2);
	     K0aPointSurf(0)=2*K0aPointSurf(1)-K0aPointSurf(2);
	     K0bPointSurf(0)=2*K0bPointSurf(1)-K0bPointSurf(2);
          };^2*K0aPointSurf(Nsurface-1)-r1^2*K0aPointSurf(Nsurface-2))/(r2^2-r1^2);
	  K0bPointSurf(Nsurface)=K0aPointSurf(Nsurface);*/
          }
          else if(typeend=="plane")
          { 
          alphaPointSurf(Nsurface) = pi/2;
	  real r1 = yPointSurf(Nsurface-1);
	  real r2 = yPointSurf(Nsurface-2);
      K0aPointSurf(Nsurface)=(r2^2*K0aPointSurf(Nsurface-1)-r1^2*K0aPointSurf(Nsurface-2))/(r2^2-r1^2);
	  K0bPointSurf(Nsurface)=K0aPointSurf(Nsurface);
          };
}
//EOM


// MACRO GLOBALE : NOUVELLE METHODE
macro CalcGeomSurf
/* This macro computes the curvature and the normal vector along the surface, as usual ffreefem P1 fields */

SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface);
CalcGeomPointSurf(alphaPointSurf,K0aPointSurf,K0bPointSurf);
K0a = 0*K0a;
K0b = 0*K0b;
N0r = 0*N0r;
N0z = 0*N0z;
for(int ksurf=0;ksurf<Nsurface+1;ksurf++)
{
	
K0a[][IndexPointSurf(ksurf)  ] = K0aPointSurf(ksurf);
K0b[][IndexPointSurf(ksurf)  ] = K0bPointSurf(ksurf);

T0r[][IndexPointSurf(ksurf)  ] = cos(alphaPointSurf(ksurf));
T0z[][IndexPointSurf(ksurf)  ] = sin(alphaPointSurf(ksurf));

if(surfaceorder=="direct")
{
N0r[][IndexPointSurf(ksurf)  ] = sin(alphaPointSurf(ksurf));
N0z[][IndexPointSurf(ksurf)  ] = -cos(alphaPointSurf(ksurf));
}
else if(surfaceorder=="reverse")
{
N0r[][IndexPointSurf(ksurf)  ] = -sin(alphaPointSurf(ksurf));
N0z[][IndexPointSurf(ksurf)  ] = cos(alphaPointSurf(ksurf));
};
}

if(isplot>1)
{
plot([N0r,N0z],wait=1,value=1,cmm=" CalcGeom : Normale");
plot(MeshForSurf,K0a,wait=1,value=1,cmm="CalcGeom : K0a");
plot(K0b,wait=1,value=1,cmm="CalcGeom : K0b");
};
//EOM







////////////////////////////////////////////////////////////////
//
// CHAPITRE 3 : OUTILS POUR DEFORMATION DE MAILLAGE (Newton)
//
////////////////////////////////////////////////////////////////



// Prolongement de la courbure dans le plan (pour la visualisation uniquement)
Vh K0ext,dK0ext;
problem ExtendC(K0ext,dK0ext)=
    int2d(MeshInt)((dx(K0ext)*dx(dK0ext)+dy(K0ext)*dy(dK0ext))*1e-30)
+on(2,K0ext=(K0a+K0b))
//+on(1,5,6,K0ext=K0)
;
// Usage : ExtendC; plot(K0ext,fill=1,value=1,wait=1,cmm="Courbure K0 prolongee dans le plan");


// Calcul de la deformation de surface libre necessaire pour corriger la courbure du maillage (a pression imposee)
// ANCIENNE METHODE  : formulation variationelle
Wh1 etaNewton ;
problem CalcEta(etaNewton,test) = int1d(MeshForSurf,2)(((K0a+K0b)-(K0-dpdz*y))*test*abs(x)) /* 1ere integrale : RHS */ 
                    + int1d(MeshForSurf,2)(((Ds(etaNewton))*(Ds(test))  -(K0a^2+K0b^2)*etaNewton*test +dpdz*etaNewton*test*N0z)*abs(x)) /* 2e integrale : matrice A */
		    + int2d(MeshForSurf)(1e-20*etaNewton*test) /* conditions limite */
		    +on(1,5,55,6,etaNewton=0);
		    
// Nouvelle methode avec macro
macro CalcEta2018
{
varf CalcEtaMatrice(etaNewton,test) = 
          int1d(MeshForSurf,2)(((K0a+K0b)-(K0-dpdz*y))*test*abs(x)) 
                        /* 1ere integrale : RHS */ 
        + int1d(MeshForSurf,2)(((Ds(etaNewton))*(Ds(test))  -(K0a^2+K0b^2)*etaNewton*test +dpdz*etaNewton*test*N0z)*abs(x)) 
                        /* 2e integrale : matrice A */
		    + int2d(MeshForSurf)(1e-20*etaNewton*test) /* conditions limite */
		    +on(1,5,55,6,etaNewton=0);
A =CalcEtaMatrice(Wh1,Wh1,solver=sparsesolver);
RHS = CalcEtaMatrice(0,Wh1);
RHS = -RHS;
etaNewton[] = A^-1*RHS;
}
// EOM		    
		    
		    
// Calcul de la deformation de surface libre necessaire pour corriger la courbure du maillage (a volume impose)	
// A REVOIR	   
macro CalcEtaV(etaNewton,K1,V)
{
varf MatEta(etaNewton,test) = 
    int1d(MeshForSurf,2)(((Ds(etaNewton))*(Ds(test))  -(K0a^2+K0b^2)*etaNewton*test)*abs(x))
  + int2d(MeshForSurf)(1e-20*etaNewton*test)
  + on(1,5,6,etaNewton=0);	
varf MatEtaRHS(etaNewton,test) = 
	int1d(MeshForSurf,2)(-((K0a+K0b)-K0)*test*abs(x));		    
varf VecEta(etaNewton,test) = int1d(MeshForSurf,2)(-test*abs(x));
varf VecVol(etaNewton,test) = int1d(MeshForSurf,2)(test*abs(x));
matrix A11 = MatEta(Wh1,Wh1); 
real[int] A12 = VecEta(0,Wh1); 
real[int] A21p = VecVol(0,Wh1); 
real A22 = 0;
matrix A = [[A11, A12],[A21p',A22]];
set(A,solver=sparsesolver);
real[int] RHS1 = MatEtaRHS(0,Wh1);
real RHS2 = V-int2d(MeshInt)(x); 
real[int] RHS = [RHS1,RHS2];
real[int] xx = A^-1 * RHS;
[etaNewton[],K1] = xx;
}
//EOM


		    
		    
		     
// Prolongement de la deformation dans le domaine (pour visualisation uniquement)
Vh etaext;
problem ExtendEta(etaext,dK0ext) =
    int2d(MeshInt)((dx(etaext)*dx(dK0ext)+dy(etaext)*dy(dK0ext)))
+on(2,etaext=etaNewton);

// Calcul du champ lagrangien pour deformation de maillage
fespace Vh11(MeshInt,[P1,P1]);
Vh11 [uz,ur], [vz,vr];


//problem CalcDef([uz,ur],[vz,vr])=
//    int2d(MeshInt)( ((dx(uz)*dx(vz)+dy(uz)*dy(vz)) + (dx(ur)*dx(vr)+dy(ur)*dy(vr))) )
//+on(2,ur=etaNewton*N0r,uz=etaNewton*N0z)
//+on(5,6,ur=0,uz=0)
//+on(1,11,ur=0); // ne pas le faire sur l'axe





// problem pour cas pined
problem CalcDef([uz,ur],[vz,vr])=
    int2d(MeshInt)( ((dx(uz)*dx(vz)+dy(uz)*dy(vz)) + (dx(ur)*dx(vr)+dy(ur)*dy(vr))) )
+on(2,ur=etaNewton*N0r,uz=etaNewton*N0z)
+on(5,6,55,ur=0,uz=0)
+on(1,11,ur=0); // ne pas le faire sur l'axe


// problem pour cas angle
problem CalcDefAngle([uz,ur],[vz,vr])=
    int2d(MeshInt)( ((dx(uz)*dx(vz)+dy(uz)*dy(vz)) + (dx(ur)*dx(vr)+dy(ur)*dy(vr))) )
+on(2,ur=etaNewton*N0r,uz=etaNewton*N0z+etaNewton[](IndexPointSurf(0))*cos(alphaPointSurf(0)) )
+on(5,6,55,uz=0)//enlever 55 pour la cas pined
+on(1,11,ur=0); // ne pas le faire sur l'axe










////////////////////////////////////////////////////////////////////////////// 
//
//    APPENDIX : former versions of the macros (not used any more)
//
//////////////////////////////////////////////////////////////////////////////


// Definitions des problemes pour calcul normale, courbure
problem CalcN0r(N0r,test)=
  int1d(MeshForSurf,2,qfe=qf3pE)(N0r*test*x)
  -int1d(MeshForSurf,2,qfe=qf3pE)(N.x*test*x)
//  +int1d(MeshForSurf,5,6,qfe=qf3pE)(dx(N0r)*test)
  +int2d(MeshForSurf)((dx(N0r)*dx(test)+dy(N0r)*dy(test))*1e-8*x);
  
//    +int1d(MeshForSurf,5,6,qfe=qf3pE)(N0r*test*x);
//    +int1d(MeshForSurf,5,6,qfe=qf3pE)(+test*(x-1)/2*x);

problem CalcN0z(N0z,test)=
  int1d(MeshForSurf,2,qfe=qf3pE)(N0z*test)
//  +int1d(MeshForSurf,5,6,qfe=qf3pE)(dx(N0z)*test)
  -int1d(MeshForSurf,2,qfe=qf3pE)(N.y*test)
  +int2d(MeshForSurf)((dx(N0z)*dx(test)+dy(N0z)*dy(test))*1e-30);
  
//   +int1d(MeshForSurf,5,6,qfe=qf3pE)(N0z*test)
//    +int1d(MeshForSurf,5,6,qfe=qf3pE)(-test*(y-1)/(abs(y-1)*(1-(x-1)^2/8)+1e-10));



 
// Courbure : composante dans le plan medidien K0a et dans le plan perpendiculaire K0b 
//problem CalcK0a(K0a,test)=
//   int1d(MeshForSurf,2,qfe=qf3pE)(K0a*test)
// + int2d(MeshForSurf)(1e-10*K0a*test)
// - int1d(MeshForSurf,2,qfe=qf3pE)(Ds2(N0r,N0z)*test);

problem CalcK0a(K0a,test)=
   int1d(MeshForSurf,2,qfe=qf3pE)(K0a*test)
   +int2d(MeshForSurf)((dx(K0a)*dx(test)+dy(K0a)*dy(test))*1e-30)
// + int2d(MeshForSurf)(1e-30*K0a*test)
 - int1d(MeshForSurf,2,qfe=qf3pE)(Ds2(N0r,N0z)*test)
 
// - int1d(MeshForSurf,2,qfe=qf3pE)(.5*test)
 
 
 //+ int1d(MeshForSurf,5,6)(K0a*test) - int1d(MeshForSurf,5,6)(.5*test)
 ;


/// Modif avec laplacien


problem CalcK0b(K0b,test)=
   int1d(MeshForSurf,2,qfe=qf3pE)(K0b*test)
  +int2d(MeshForSurf)((dx(K0b)*dx(test)+dy(K0b)*dy(test))*1e-30)
// + int2d(MeshForSurf)(1e-10*K0b*test)
 - int1d(MeshForSurf,2,qfe=qf3pE)(N0r/x*test);




// MACRO GLOBALE : ANCIENNE METHODE (la nouvelle est reportee au bout)
macro CalcGeomSurfANS
CalcN0r;
CalcN0z;
plot(N0r,wait=1,value=1);
plot(N0z,wait=1,value=1);
NormN = sqrt(N0r^2+N0z^2)+1e-10;
N0r = N0r/NormN;
N0z = N0z/NormN;
T0r = N0z;
T0z = -N0r;
CalcK0a;
CalcK0b;
plot(K0a,wait=1,value=1);
plot(K0b,wait=1,value=1);
cout << "max K0a : " << K0a[].max << " " << K0a[].min <<endl; 
//EOM
//


