//  Weakly NonLinear analysis of sloshing dynamics with a mobile contact line
//  (inviscid theory)
//  By Nabil ACHOUR
// ----------------------------------------
// the problem is potential : u = i grad (phi) (mind the "i" factor !) 
// PROBLEM : find $\omega$ and $[phi,eta]$  such that
// 	$$ \Delta \phi _2-\frac{m^2}{r^2}\phi _2 =0  $$ inside the domain
// 	$$ i\omega \rho\phi _2-\frac{dA}{dT}\phi _1=g cos(\alpha)\eta _2+\sigma \left(- \frac{1}{r} \DP{}{s_0} \left( r \DP{\eta _2}{s_0} \right)
//              -\left[ K_0^{(a)2} +K_0^{(b)2}\right] \eta _2 - \frac{m^2}{r^2} \eta _2\right) $$ on the free surface
// 	$$ -i\omega \eta _2 +\frac{dA}{dT}\eta _1 =\nabla \phi _2.\bf{N _0} $$ on the free surface 
// 	$$ \left.\DP{\eta _2}{s}\right|_{s=s_0}=i\omega\frac{\widehat{\alpha}}{cos(\alpha)}A\eta _1(s_0)-\frac{i\Delta}{\pi}\frac{A}{|A|} 
//          -\sigma \left[K_0^{(a)}cot(\alpha)\eta _2\right]_{s=s_0}   $$ at s=s0 (contact line)
//-----------------------------------------

// Remarque : phi et eta sont definis comme des champs P2 sur le volume, meme si eta n'a de sens qu'à la surface

// Definition des parametres necessaires au bon fonctionnement des macros
string surfaceorder="direct"; /// possibilities : "direct", "reverse" (use reverse to fit with matlab "meniscus" program);
string typestart = "pined"; // possibilites : "pined", "axis", "plane", "angle"
string typeend = "axis";    // possibilites : "pined", "axis", "plane", "angle"
int anglecut =3; // position of the "cut" in the tan2 determination. 
                  // 0 -> alpha in [-pi,pi]; 1-> [-pi/2,3pi/2]; 2 -> [0,pi] ; 3 -> [-3*pi/2,pi/2] 

verbosity=0;

// constantes physiques 
real g=1;                 // Gravity field
real gamma = 0.002;	  // Surface Tension
real R=1;
real dpdz ;
real epss=0.0001;

real alphatild=0.60*epss;
real deltatild=65*(epss^2);




int  testDIR = exec("ls RES_STAB > OUTRES");
	
	if (testDIR!=0)
		{
		cout << "Creation d'un repertoire RES_STAB" << endl;
		exec("mkdir RES_STAB");
		}

// Parametres du calcul
int m;  // Nombre d'onde
int Nval = 10;  // nb. de valeurs propres à calculer
int Nmodes = 1; // nb. de vecteurs propres à post-traiter

cout << " ENTREZ Le nombre d'onde m ?" << endl;
cin >> m;
cout << "==> Calcul des valeurs propres pour m = " << m << endl;

////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE INITIAUX
//
////////////////////////////////////////////////////////////////
//MeshVessel_guess.msh

mesh Th=readmesh("MeshVessel.msh");
mesh MeshInt=Th; // autre nom possible...
mesh Shempty=MeshInt; 	
real L, K0, Vol, Area;

include "Macros_Geometrie_SurfaceVessel.edp"

// Calcul des normales et des courbures
CalcGeomSurf;

// fichier info geom

{
ifstream fileG("Infos_Geom.txt");
fileG >> L; 
fileG >> Vol;
fileG >> K0;
fileG >> dpdz; 
fileG >> Area;
//fileG >> Nsurface;
}
dpdz= 1; 

////////////////////////////////////////////////////
//
//  DECLARATION DES MATRICES
//
/////////////////////////////////////////////////////


//fespace Vh(Th,P1);
fespace VhxVh(Th,[P1,P1]);

VhxVh [phi,eta],[q,v];
Vh phiB,etaB,etaC,vC,qC,phiC,qB,vB,phiA,etaA,qA,vA;

real shift = 0;  // value of the shift
real RegEta = 1e-8;



// Construction de la matrice A
// Nouvelle methode par blocs
varf avphi(phiA,vA)=	  
	  int2d(Th)(  (dx(phiA)*dx(vA) + dy(phiA)*dy(vA)+(m^2+1e-8)*phiA*vA/(x^2+1e-30))*x  ) 
	+ int1d(Th,1)(m*phiA*vA*1e30)
;

varf aqeta(etaA,qA)=
	int1d(Th,2)(gamma*((Ds(etaA))*(Ds(qA))-(K0a^2+K0b^2)*etaA*qA+m^2/(x^2+1e-30)*qA*etaA)*abs(x))
	+int1d(Th,2)(dpdz*etaA*qA*N0z*x)
	+ int2d(Th)((dx(qA)*dx(etaA)+dy(qA)*dy(etaA))*RegEta*abs(x))
	+ int1d(Th,1,5)(1e30*etaA*qA*abs(x))
;
/*varf aveta(etaA,vA)=
	int2d(Th)((dx(vA)*dx(etaA)+dy(vA)*dy(etaA))*1e-30*abs(x))//
	- int1d(Th,2)(shift*(etaA*vA)*x)
;

varf aqphi(phiA,qA)=
	int2d(Th)( 1e-30*(dx(phiA)*dx(qA) + dy(phiA)*dy(qA))*x  ) //
	- int1d(Th,2)(shift*(qA*phiA)*x)
;*/
matrix Avphi = avphi(Vh,Vh,solver=UMFPACK);
//matrix Aqphi = aqphi(Vh,Vh,solver=UMFPACK);
matrix Aqeta = aqeta(Vh,Vh,solver=UMFPACK); 
//matrix Aveta = aveta(Vh,Vh,solver=UMFPACK); 
Aqeta(IndexPointSurf(0),IndexPointSurf(0)) = Aqeta(IndexPointSurf(0),IndexPointSurf(0))-gamma*(1/tan(alphaPointSurf(0)))*K0aPointSurf(0)*xPointSurf(0);
matrix A = [[0,Aqeta],[Avphi,0]];
set(A,solver =UMFPACK);

// Construction de la matrice B
// methode par blocs
varf bqphi(phiB,qB) = 
       int1d(Th,2)(qB*phiB*x);

varf bveta(etaB,vB) = 
        int1d(Th,2)(etaB*vB*x);

matrix Bqphi = bqphi(Vh,Vh,solver=GMRES,eps=1e-20); 
matrix Bveta = bveta(Vh,Vh,solver=GMRES,eps=1e-20); 
matrix B = [[Bqphi,0],[0,Bveta]];
set(B,solver =GMRES);

// Construction de la matrice C
varf cveta(etaC,vC) = 
        int1d(Th,2)(etaC*vC*x*1e-20);
varf cqphi(phiC,qC) = 
       int1d(Th,2)(qC*phiC*x*1e-20);
matrix Cveta = cveta(Vh,Vh,solver=GMRES,eps=1e-20);
matrix Cqphi = cqphi(Vh,Vh,solver=GMRES,eps=1e-20); 
Cveta(IndexPointSurf(0),IndexPointSurf(0))=Cveta(IndexPointSurf(0),IndexPointSurf(0))+(alphatild/cos(alphaPointSurf(0)+pi/2));
matrix C=[[0,Cveta],[Cqphi,0]];
set(C,solver =GMRES);

////////////////////////////////////////////////////
//
//  RESOLUTION DU PB AUX VALEURS PROPRES
//
/////////////////////////////////////////////////////


int nev=Nval;  // number of computed eigen valeu close to sigma
real[int] ev(nev),evi(nev); // to store nev eigein value
VhxVh[int] [eVphi,eVeta](nev);   // to store nev eigen vector

real[int,int] EVV(A.n,nev);

int k=EigenValue(A,B,sym=false,sigma=shift,value=ev,ivalue=evi,vector=eVphi,tol=1e-10,maxit=0,ncv=0);

//EVV = eVphi[][];
SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface); // cf. macro
cout << endl << "########################################################" << endl << endl;
cout << " ### VP Calculees :" << endl;
real[int]  eev(Nval);
ofstream EV("spectrum.dat");
EV.scientific;
for (int i=0;i<k;i++)
{
  cout << " VP numero " <<  i<< " : " << ev[i] << "+i"<<evi[i] <<  endl;
  EV << ev[i] << "  "<< evi[i] << " " << L << "  " << K0  << " " << Vol << "  " << dpdz << "   " << m  <<  endl;
//    plot(u1,cmm="Eigen  Vector "+i+" valeur =" + ev[i]  ,wait=1,value=1);
}; 
    
real[int] X(A.n);   
// Post-traitement MODES
for (int i=0;i<Nmodes;i++)
   {	
    Vh ModePhi,ModeEta;
//    ModePhi=eVphi[i];
//    ModeEta=eVeta[i];
	real[int] EVVV(A.n);
	EVVV = eVphi[i][];
	//ModeEta = ModeEta/ModeEta(1,0)*.5;
	//ModePhi = ModePhi/ModeEta(1,0)*.5;
	[ModePhi[],ModeEta[]] = EVVV;
	X=[ModePhi[],ModeEta[]];
    	Vh ux,uy;
   };
////////////////////////////////////////////////////
//
//    Coeff ordre 2
//
///////////////////////////////////////////////////
real ommega=ev[0];
real[int] Y1(A.n);
real[int] Y2(A.n);
Y1= B*X;
eta[] = X; // on recupere eta et phi dans un champ "composite"
Vh Xeta;
Vh Xphi;
Xeta = eta;
Xphi = phi;
eta[] = Y1; 
Vh Y1eta;
Vh Y1phi;
Y1eta = eta;
Y1phi = phi;

Y2=C*X;
eta[] = Y2; 
Vh Y2eta;
Vh Y2phi;
Y2eta = eta;
Y2phi = phi;
real c1 = int2d(Th)((Xphi*Y1phi)*x)+int1d(Th,2)((Xeta*Y1eta)*x);
real c2 = int2d(Th)((Xphi*Y2phi)*x)+int1d(Th,2)((Xeta*Y2eta)*x);
real c22=(alphatild/cos(alphaPointSurf(0)+pi/2))*Xeta[](IndexPointSurf(0));
real c3=(deltatild/pi)*xPointSurf(0);
real Xi=ev[0]*c22/c1;
real xi=c3/c1;


cout << endl << "########################################################" << endl << endl;

cout << " Les coefficients de l'equation d'amplitude : "<<endl;
cout << " Xi=" << Xi <<  endl;
cout << " xi=" << xi <<  endl;

cout << endl << "########################################################" << endl << endl;

