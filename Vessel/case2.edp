varf CalcEtaMatrice(etaNewton,test) = 
		int1d(Shempty,2)((gamma*(K0a+K0b)-(P0-dpdz*y))*test*abs(x)) 
		                /* 1ere integrale : RHS */ 
	     - int1d(Shempty,2)((-gamma*(K0a^2+K0b^2)*etaNewton*test+dpdz*etaNewton*test*N0z)*abs(x)) 
		+int1d(Shempty,2)(1e-30*Ds(etaNewton)*Ds(test)) // pour prevoir ce terme dansla structure de la matrice 
		                /* 2e integrale : matrice A */
			    + int2d(Shempty)(1e-100*etaNewton*test) /* conditions limite */
			    +on(5,55,etaNewton=0) // dirichlet sur la surface (cas pined ajouter 55)
		            +on(1,etaNewton=0);
	A =CalcEtaMatrice(Wh1,Wh1,solver=sparsesolver);
	real[int] RHS = CalcEtaMatrice(0,Wh1);
	RHS = RHS;
	real[int,int] A1(A.n,A.m);
	A1=0.;
	cout<<IndexPointSurf.n<<endl;
	   int[int] Xi(A.nbcoef) ;
	   int[int] Xj(A.nbcoef) ;
	   real[int] Axij(A.nbcoef);
	   [Xi,Xj,Axij]=A;
	//cout<<"nbcoef"<< A.n<<endl;
	for(int n1 = 0; n1 < A.nbcoef; n1++)
	  {
	   A1(Xi(n1),Xj(n1))=Axij(n1);
	  };


	// adding of the term DS(eta)*DS(test)*x
	for(int i=1;i<=Nsurface-1;i++)  // pour construire la ligne i etabar = hat(eta)(i) 
		  { //i=IndexPointSurf
                    A1(IndexPointSurf(i),IndexPointSurf(i-1)) =A1(IndexPointSurf(i),IndexPointSurf(i-1))+ (xPointSurf(i)+xPointSurf(i-1))/2*1/dS0PointSurf(i-1);
                    A1(IndexPointSurf(i),IndexPointSurf(i)) =A1(IndexPointSurf(i),IndexPointSurf(i)) - xPointSurf(i)*(1/dS0PointSurf(i)+1/dS0PointSurf(i-1));
                    A1(IndexPointSurf(i),IndexPointSurf(i+1)) =A1(IndexPointSurf(i),IndexPointSurf(i+1))+  (xPointSurf(i)+xPointSurf(i+1))/2*1/dS0PointSurf(i); 
                  };
               // case i=0
        if  (typeend=="axis") //for bubble/drop : point 1 is on symmetry axis
                  {
		       A1(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface)) = -1/dS0PointSurf(Nsurface-1)*((xPointSurf(Nsurface-1)+xPointSurf(Nsurface))/2); 
                       A1(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface-1)) = A1(IndexPointSurf(Nsurface-1),IndexPointSurf(Nsurface));
                   }
	else
		   {	 // for bridge : point 1 is pinned
                  	A1(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface)) = 1;
                  	A1(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface-1)) = 0;
                    };
         if (typestart=="pined")
                    {// "pinned" case
                       A1(IndexPointSurf(0),IndexPointSurf(0)) = -1;
                       A1(IndexPointSurf(0),IndexPointSurf(1)) = 0;
		    }
         else {if(typestart=="angle")
                    {
                //    	A1(IndexPointSurf(0),IndexPointSurf(1)) = (xPointSurf(0)+xPointSurf(1))/2*1/dS0PointSurf(1);
                //    	A1(IndexPointSurf(0),IndexPointSurf(0)) = - xPointSurf(0)*(1/dS0PointSurf(1)); 
                   	//A1(IndexPointSurf(0),IndexPointSurf(1)) = A1(IndexPointSurf(0),IndexPointSurf(1)) + (  (K0aPointSurf(0)^2+K0bPointSurf(0)^2-dpdz*cos(alphaPointSurf(0)))*xPointSurf(0) +(K0aPointSurf(1)^2+K0bPointSurf(1)^2-dpdz*cos(alphaPointSurf(1)))*xPointSurf(1) )/2*(dS0PointSurf(1)/6);  
                   	//A1(IndexPointSurf(0),IndexPointSurf(0)) = A1(IndexPointSurf(0),IndexPointSurf(0)) + (K0aPointSurf(0)^2+K0bPointSurf(0)^2-dpdz*cos(alphaPointSurf(0)))*xPointSurf(0)*(dS0PointSurf(1))/3;
                    A1(IndexPointSurf(0),IndexPointSurf(0)) =A1(IndexPointSurf(0),IndexPointSurf (0)) - (xPointSurf(0))*(1/dS0PointSurf(0));
                    A1(IndexPointSurf(0),IndexPointSurf(1)) = A1(IndexPointSurf(0),IndexPointSurf(1)) +  (xPointSurf(0)+xPointSurf(1))/2*1/dS0PointSurf(0); 
                    
                       // terme supplementaire traduisant la translation
                       // verticale pour recoller Ã  la surface
                    	for(int i=1;i<Nsurface;i++) 
                    	   {	A1(IndexPointSurf(i),IndexPointSurf(0)) = A1(IndexPointSurf(i),IndexPointSurf(0))-dpdz*cos(alphaPointSurf(0))*xPointSurf(i)*(dS0PointSurf(i-1)+dS0PointSurf(i))/2;
                    	    };
                    	A1(IndexPointSurf(Nsurface),IndexPointSurf(0)) = A1(IndexPointSurf(Nsurface),IndexPointSurf(0))- dpdz*cos(alphaPointSurf(0))*(xPointSurf(Nsurface)+xPointSurf(Nsurface-1))/2*(dS0PointSurf(Nsurface))/2;
                    	A1(IndexPointSurf(0),IndexPointSurf(0)) = A1(IndexPointSurf(0),IndexPointSurf(0))- dpdz*cos(alphaPointSurf(0))*(xPointSurf(0)+xPointSurf(1))/2*(dS0PointSurf(1))/2;
                  cout << "cc" << xPointSurf(0)<< endl;
                    {RHS(IndexPointSurf(0)) =RHS(IndexPointSurf(0))-(alphaPointSurf(0)-beta)*(xPointSurf(0));}
	}}
	matrix A2=A1;	
	set(A2,solver=sparsesolver);
	etaNewton[] = A2^-1*RHS;
if(idebug >0)
	{
	cout << " Deconstruction de la matrice (partie restreinte aux DDL de la surface)" << endl;
	for(int isurf = 0; isurf < Nsurface+1; isurf++)
	  {
	  cout << "ligne " << isurf << " :     ( nv(isurf) = " << IndexPointSurf(isurf) << " ) "  << endl;
	  for(int jsurf = 0; jsurf < Nsurface+1; jsurf++)
	    { if(abs(A1(IndexPointSurf(isurf),IndexPointSurf(jsurf)) )>1e-10)
	      {
	   cout << " Element (" << isurf+1 << "," << jsurf+1 << ") : " << A1(IndexPointSurf(isurf),IndexPointSurf(jsurf)) << endl;	
	    }};
	  cout << endl;
	  };
	};

if(idebug>0)
	{
	cout << " Deconstruction du RHS (DDL sur la surface) ..." << endl ;
	for(int isurf = 0; isurf < Nsurface+1; isurf++)
	  {
	cout << "RHs(" << isurf+1 << ") = " << RHS(IndexPointSurf(isurf)) << endl;
	//RHSfilte(Nsurface);
	  }

	/*cout << " Deconstruction du RHS (tous les DDL) ..." << endl ;
	for(int iv = 0; iv < Nt; iv++)
	  {
	cout << "RHs(" << iv << ") = " << RHS(iv) << endl;
	  }*/
	};
