if (j==0)
	{cout << "c=1" << endl;
	varf CalcEtaMatrice(etaNewton,test) = 
		int1d(Shempty,2)(1e-30*(gamma*(K0a+K0b)-(P0-dpdz*y))*test*abs(x)) 
		                /* 1ere integrale : RHS */ 
	     + int1d(Shempty,2)(1e-30*((Ds(etaNewton))*(Ds(test))-gamma*(K0a^2+K0b^2)*etaNewton*test+dpdz*etaNewton*test*N0z)*abs(x)) 
		                /* 2e integrale : matrice A */
			    + int2d(Shempty)(1e-30*etaNewton*test) /* conditions limite */
			    +on(5,55,etaNewton=0) // dirichlet sur la surface (cas pined)
		            +on(1,etaNewton=0) ;
	A =CalcEtaMatrice(Wh1,Wh1,solver=sparsesolver);
	//real[int,int] A(Nt+1,Nt+1);
};
	
	for(int i=1;i<=Nsurface-1;i++)  // pour construire la ligne i etabar = hat(eta)(i) 
		  {
                    A(IndexPointSurf(i),IndexPointSurf(i-1)) = (xPointSurf(i)+xPointSurf(i-1))/2*1/dS0PointSurf(i-1);
                    A(IndexPointSurf(i),IndexPointSurf(i)) = - xPointSurf(i)*(1/dS0PointSurf(i)+1/dS0PointSurf(i-1));
                    A(IndexPointSurf(i),IndexPointSurf(i+1)) =  (xPointSurf(i)+xPointSurf(i+1))/2*1/dS0PointSurf(i); 
                    A(IndexPointSurf(i),IndexPointSurf(i-1)) = A(IndexPointSurf(i),IndexPointSurf(i-1)) + (  (K0aPointSurf(i)^2+K0bPointSurf(i)^2-dpdz*cos(alphaPointSurf(i)))*xPointSurf(i)+(K0aPointSurf(i-1)^2+K0bPointSurf(i-1)^2-dpdz*cos(alphaPointSurf(i-1)))*xPointSurf(i-1) )/2 * (dS0PointSurf(i-1)/6);  
                    A(IndexPointSurf(i),IndexPointSurf(i)) = A(IndexPointSurf(i),IndexPointSurf(i)) + (K0aPointSurf(i)^2+K0bPointSurf(i)^2- dpdz*cos(alphaPointSurf(i)))*xPointSurf(i)*(dS0PointSurf(i-1)+dS0PointSurf(i))/3; 
                    A(IndexPointSurf(i),IndexPointSurf(i+1)) = A(IndexPointSurf(i),IndexPointSurf(i+1)) + ( (K0aPointSurf(i)^2+K0bPointSurf(i)^2-dpdz*cos(alphaPointSurf(i)))*xPointSurf(i) +(K0aPointSurf(i+1)^2+K0bPointSurf(i+1)^2-dpdz*cos(alphaPointSurf(i+1)))*xPointSurf(i+1) )/2 * (dS0PointSurf(i)/6); 
 		};
               // case i=0
        if  (typeend=="axis") //for bubble/drop : point 1 is on symmetry axis
                  {
		       A(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface)) = -1/dS0PointSurf(Nsurface-1)*((xPointSurf(Nsurface-1)+xPointSurf(Nsurface))/2); 
                       A(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface-1)) = A(IndexPointSurf(Nsurface-1),IndexPointSurf(Nsurface));
                       A(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface))  = A(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface)) + ((K0aPointSurf(Nsurface)^2+K0bPointSurf(Nsurface)^2-dpdz*cos(alphaPointSurf(Nsurface)))*xPointSurf(Nsurface)+(K0aPointSurf(Nsurface-1)^2+K0bPointSurf(Nsurface-1)^2-dpdz*cos(alphaPointSurf(Nsurface-1)))*xPointSurf(1))/2*(dS0PointSurf(1)/3); 
                   }
	else
		   {	 // for bridge : point 1 is pinned
                  	A(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface))  = 1;
                  	A(IndexPointSurf(Nsurface),IndexPointSurf(Nsurface-1))  = 0;
                    };
         if (typestart=="pined")
                    {// "pinned" case
                       A(IndexPointSurf(0),IndexPointSurf(0)) = -1;
                       A(IndexPointSurf(0),IndexPointSurf(1)) = 0;
                       //A(IndexPointSurf(0),IndexPointSurf(2)) = 0;
		    }
         else {if(typestart=="angle")
                    {// cas a traiter différemment  
                      //partie integration par partie idem au cas i
                    	A(Nsurface-1,Nsurface-2) = (xPointSurf(Nsurface-1)+xPointSurf(Nsurface-2))/2*1/dS0PointSurf(Nsurface-2);
                    	A(Nsurface-1,Nsurface-1) = - xPointSurf(Nsurface-1)*(1/dS0PointSurf(Nsurface-2)); 
                    	A(Nsurface-1,Nsurface-2) = A(Nsurface-1,Nsurface-2)  + (  (K0aPointSurf(Nsurface-1)^2+K0bPointSurf(Nsurface-1)^2-
						dpdz*cos(alphaPointSurf(Nsurface-1)))*xPointSurf(Nsurface-1) +(K0aPointSurf(Nsurface-2)^2+K0bPointSurf(Nsurface-2)^2-
							dpdz*cos(alphaPointSurf(Nsurface-2)))*xPointSurf(Nsurface-2) )/2*(dS0PointSurf(Nsurface-2)/6);  
                    	A(Nsurface-1,Nsurface-1) = A(Nsurface-1,Nsurface-1) + (K0aPointSurf(Nsurface-1)^2+K0bPointSurf(Nsurface-1)^2- 
							dpdz*cos(alphaPointSurf(Nsurface-1)))*xPointSurf(Nsurface-1)*(dS0PointSurf(Nsurface-2))/3;
                    	A(Nsurface-1,Nsurface-3) = 0;//pour etre sur
                       // terme supplementaire venant du terme de bord de l'IPP
                       //est a mettre dans le RHS
                    
                       // terme supplementaire traduisant la translation
                       // verticale pour recoller à la surface
                    	for(int i=1;i<Nsurface-2;i++) 
                    	   {	A(i,Nsurface-1) = A(i,Nsurface-1) - dpdz*cos(alphaPointSurf(Nsurface))*xPointSurf(i)*(dS0PointSurf(i-1)+dS0PointSurf(i))/2;
                    	    };
                    	A(0,Nsurface-1) = A(0,Nsurface-1) - dpdz*cos(alphaPointSurf(Nsurface-1))*(xPointSurf(0)+xPointSurf(1))/2*(dS0PointSurf(0))/2;
                    	A(Nsurface-1,Nsurface-1) = A(Nsurface-1,Nsurface-1) - dpdz*cos(alphaPointSurf(Nsurface-1))*(xPointSurf(Nsurface-1)+
					xPointSurf(Nsurface-2))/2*(dS0PointSurf(Nsurface-2))/2;
	}};
                //AP = A; end of calculation of A
int Nt=A.n;	

	real[int] RHS(Nt);
        for(int i=1;i<=Nsurface-1;i++) 
                   {RHS(IndexPointSurf(i)) = (gamma*(K0aPointSurf(i)+K0bPointSurf(i))-P0-dpdz*yPointSurf(i))*xPointSurf(i)*(dS0PointSurf(i-1)+dS0PointSurf(i))/2;} 
        if (typestart=="axis")
                    {RHS(IndexPointSurf(Nsurface)) =0;}
        if (typestart=="pined")
                    {RHS(IndexPointSurf(Nsurface)) = 0;}
        if (typeend=="pined")
                    {RHS(IndexPointSurf(0)) = 0;}
        if (typeend=="angle")
                    {RHS(IndexPointSurf(0)) =-(alphaPointSurf(Nsurface-1)-beta)*(xPointSurf(Nsurface-1));}
	set(A,solver=sparsesolver);
        etaNewton[] = A^-1*RHS;
