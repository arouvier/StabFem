//////////////////////////////////////////////////////////////////////////////////////////////
include "Params.edp";
include "Macros_StabFem.edp"


//////////////////////////////////////////////////////////////////////////////////////////////
real Rey=60.0;        //Reynolds Number
real M=0.5;           ////////////////// MACH NUMBER   //////////////////////////
real Mbflow=0.5;
real gamma=1.4; //////////////////         GAMMA        //////////////////////////
real Pr=0.7;         //////////////////  PRANDTL NUM   //////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////// MODES PARAMETERS ////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////

complex sigma=0.03+0.71i;
int nev=2;  // eigenvalues number
int ncv=10;
real ttgv=1e30;
real Amp = 0.4;
real Af = 0.05;
real Amp0 = 10;
real TOLLERANCENewton=1e-9;  /// tollerance of newton loop
int NITERATIONNEWTLOOP=40;  //////////////  Max number of ITERATIONs --> Newton loop
int[int] forder=[1,1,1,1,1,1,1,1];

// check that ncv is big enough
//ncv=max(2*nev,ncv);


///
/// -------------------------------------------------------------------------------
/// -------------------------------------------------------------------------------
load "MUMPS_seq"
load "scotch"
load "iovtk"
//load "./CPP_FUNCTIONS/BinaryIO_64";
//load "./CPP_FUNCTIONS/ComplexIO_64";


string ssparams="";//nprow="+npr+", npcol="+npc;

//////////////////////////////////////////////////////////////////////////////////////////////


func bb=[[xinfm,-yinf],[xinfv,yinf]];

//////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////
if(mpirank==0)
{
cout << "$$$$$$$$$$$$$$$$   Parameter Settings   $$$$$$$$$$$$$$$$ " << endl;
cout << "$$$                                                      " << endl;
cout << "$$$             Mach           -->    " << M << endl;
cout << "$$$             Reynolds       -->    " << Rey << endl;
cout << "$$$             Shift(sigma)   -->    " << sigma << endl;
cout << "$$$             N.Eigenvalues  -->    " << nev << endl;
cout << "$$$                                                      " << endl;
cout << "$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ " << endl;
}
///////////////////////////////////////////////////////////////////////////////////////////////

mesh th;
if(mpirank==0)
  {
    th=readmesh(pht+namemesh);
    int[int] nupart(th.nt);
    nupart=0; 
    if(mpisize>1)
      scotch(nupart, th, mpisize);
    th=change(th,fregion= nupart[nuTriangle]);
    
  }
broadcast(processor(0),th); 


///////////////////////////////////////////////////////////////////////////////////////////////
fespace XH2(th,P2);
///////////////////////////////////////////////////////////////////////////////////////////////
fespace XXxxxH(th,[P2,P2,P1,P1,P1]); /// 
///////////////////////////////////////////////////////////////////////////////////////////////

XH2 AMPFORCE=AmpSponge(M);
//////////////////////////// MARCRO /////////////////////////// 
    
macro def(u,p,T,rho)[u#x,u#y,p,T,rho]//EOF

XXxxxH def(Ub,Pb,Tb,Rhob);
XXxxxH def(Unb,Pnb,Tnb,Rhonb);
XXxxxH def(Urif,Prif,Trif,Rhorif)=[1.0,0.0,1.0,1.0,1.0];

/////////////////////////////////////////////////////////////////////////////////////////////////////

complex[int] ev(nev);
XXxxxH<complex> [int] [eux,euy,eurho,euT,eup](nev);
XXxxxH  [sux,suy,surho,suT,sup];
XXxxxH  [cux,cuy,curho,cuT,cup];
XXxxxH<complex>  [uMx,uMy,uMrho,uMT,uMp]; // TODO DELETE ME
XXxxxH<complex>  [cuMx,cuMy,cuMrho,cuMT,cuMp]; // TODO DELETE ME
XXxxxH def(upr,ppr,Tpr,rhopr),def(upi,ppi,Tpi,rhopi); // TO SAVE THE MODE in VTK
XXxxxH def(uRS,pRS,TRS,rhoRS);


XXxxxH def(du,dp,dT,drho);
complex lambda;
complex lambdaPrev;
/////////////////////////////////////////////////////////////////////////////////////////////////////

macro div(u) ((dx(u#x)+dy(u#y)))   //EOM
  macro ugradf(u,f) ((u#x*dx(f)+u#y*dy(f)))    //
  macro ugradfConj(u,f) ((conj(u#x)*dx(f)+conj(u#y)*dy(f)))    //
  macro realInnerProd(u,v) ((u#x*v#x + u#y*v#y))
//macro gradfgradf(f,f1) ((dx(f)*dx(f1)+dy(f)*dy(f1)))  //
//macro strain(u1,u2,v1,v2) ((dx(u1)*dx(v1)+(1./2)*(dx(u2)+dy(u1))*(dx(v2)+dy(v1))+dy(u2)*dy(v2)))  //
  macro termnonlinear(u,v,w) ((w#x*(u#x*dx(v#x)+u#y*dy(v#x))+w#y*(u#x*dx(v#y)+u#y*dy(v#y)))) //
  macro Grad(u) [[dx(u#x),dx(u#y)],[dy(u#x),dy(u#y)]]//EOM
  macro Strain(u)[[dx(u#x),0.5*(dx(u#y)+dy(u#x))],[0.5*(dx(u#y)+dy(u#x)),dy(u#y)]]//EOM
  macro gradgrad(u,v)(dx(u)*dx(v)+dy(u)*dy(v))//EOM

  macro NonLinearRho(ua,ub,v) (
				(ua#rho*div(ub) + ub#rho*div(ua))*v
				(ugradf(ua,ub#rho) + ugradf(ub,ua#rho))*v
			) //EOM macro for mutual convection operator

  macro NonLinearU(ua,ub,v) (
			 	  ua#rho*termnonlinear(ub,Ub,v) +  ub#rho*termnonlinear(ua,Ub,v)
				+ Rhob*termnonlinear(ua,ub,v) + Rhob*termnonlinear(ub,ua,v)
				+ ua#rho*termnonlinear(Ub,ub,v) + ub#rho*termnonlinear(Ub,ua,v)
			) //EOM macro for mutual convection operator

  macro NonLinearT(ua,ub,v) (
				  v*(Rhob*ugradf(ua,ub#T) + Rhob*ugradf(ub,ua#T))
				+ v*(ua#rho*ugradf(Ub,ub#T) + ub#rho*ugradf(Ub,ua#T))
				+ v*(ua#rho*ugradf(ub,Tb) + ub#rho*ugradf(ua,Tb))
				+ v*(ua#p*div(ub) + ub#p*div(ua))
				- v*gamma*(gamma-1.0)*M^2/Rey*(2.0*((Strain(ua):Strain(ub)))-2.0/3.0*(div(ua)*div(ub)))
				- v*gamma*(gamma-1.0)*M^2/Rey*(2.0*((Strain(ub):Strain(ua)))-2.0/3.0*(div(ub)*div(ua)))
			) //EOM macro for mutual convection operator

  macro NonLinearP(ua,ub,v) (
				v*(ua#rho*ub#T + ub#rho*ua#T)
			) //EOM macro for mutual convection operator


  macro NS(u,v)(
				v#rho*(u#rho*div(u)+ugradf(u,u#rho))

				-u#p/(gamma*Ma^2)*div(v)+2.0/Re*(Strain(u):Grad(v))-2.0/(3.0*Re)*(div(u)*div(v))+Rhob*termnonlinear(u,u,v)
				
				+v#T*(u#rho*ugradf(u,u#T)+u#p*div(u)-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(u):Strain(u)))-2.0/3.0*(div(u)*div(u))))
				+gamma/(Pr*Re)*gradgrad(u#T,v#T)   
				
				+v#p*(u#p-(u#rho*u#T))
	) //EOM macro for NS operator

  macro NSL(u,U,v)(
				v#rho*(u#rho*div(U)+U#rho*div(u)+ugradf(U,u#rho)+ugradf(u,U#rho)) 

				-u#p/(gamma*Ma^2)*div(v)+2.0/Re*(Strain(u):Grad(v))-2.0/(3.0*Re)*(div(u)*div(v))+Rhob*termnonlinear(u,U,v)
				+u#rho*termnonlinear(U,U,v)+U#rho*termnonlinear(U,u,v)

				+v#T*(u#rho*ugradf(U,U#T)+U#rho*ugradf(U,u#T)+U#rho*ugradf(u,U#T)+(gamma-1)*(div(U)*u#p 
				+ U#p*div(u))-gamma*(gamma-1.0)*Ma^2/Re*(2.0*((Strain(u):Strain(U))+(Strain(U):Strain(u)))-2.0/3.0*(2.0*div(U)*div(u))))
				+gamma/(Pr*Re)*gradgrad(u#T,v#T)

				+v#p*(u#p-(u#rho*U#T+U#rho*u#T))								  
	) // EOM macro for linear NS operator



macro Lift(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.y)
	+int1d(th,2,21,22,23)( -nu*2*(2*dy(u2)*N.y+(dx(u2)+dy(u1))*N.x))
	)
// WARNING : HERE IT IS Lift FORCE
macro Drag(nu,u1,u2,p)   
	(
	int1d(th,2,21,22,23)(2*p*N.x)
	+int1d(th,2,21,22,23)( -nu*2*(2*dx(u1)*N.x+(dx(u2)+dy(u1))*N.y))
	)
// Drag FORCE



  varf dirichlet(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=on(bcinlet,dux=1.0-Ubx,duy=0.0-Uby,dT=1.-Tb,drho=1.-Rhob)
  +on(bcoutflow,dux=1.0-Ubx,duy=0.0-Uby,dT=1.-Tb,drho=1.-Rhob)
  +on(bcwall,dux=0.0-Ubx,duy=0.0-Uby);
real Re = Rey;
real Ma = M;
complex shift = sigma;
real ssvv=1e-10;


varf vNs(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=-int2d(th,mpirank)(rhos*(Rhob*div(Ub)+ugradf(Ub,Rhob) 
								 )
							   //mass equation
							   -Pb*div(us)+2.0/Rey*(Strain(Ub):Grad(us))-2.0/(3.0*Rey)*(div(Ub)*div(us))+Rhob*termnonlinear(Ub,Ub,us)
							    
							   //momentum
								+Ts*(Rhob*ugradf(Ub,Tb)+(gamma-1.)*Rhob*Tb*div(Ub)-gamma*(gamma-1.0)*M^2/Rey*(2.0*((Strain(Ub):Strain(Ub)))-2.0/3.0*(div(Ub)*div(Ub))))
								+gamma/(Pr*Rey)*gradgrad(Tb,Ts)
								//energy
								
							   // energy
							   +ps*(1.0+gamma*M^2*Pb-(Rhob*Tb) )

							   	// forcing
							   + rhos*2*(Amp^2)*(real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp)) )
							 	+ 2*(Amp^2)*(usx*real(conj(uMrho)*(1i*imag(lambda))*uMx ) + usy*real(conj(uMrho)*(1i*imag(lambda))*uMy) 
							    + usx*(real(conj(uMrho)*ugradf(uM,Ubx))) + usy*(real(conj(uMrho)*ugradf(uM,Uby))) + usx*(real(Rhob*ugradfConj(uM,uMx))) 
							    + usy*(real(Rhob*ugradfConj(uM,uMy))) + usx*(real(conj(uMrho)*ugradf(Ub,uMx))) 
							    + usy*(real(conj(uMrho)*ugradf(Ub,uMy))) )
								+ 2*(Amp^2)*Ts*(real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) + 
														 real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
														 + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
														 -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))) )
								+ 2*(Amp^2)*ps*(real(conj(uMrho)*uMT))
							   )
  -int2d(th,mpirank)(AMPFORCE*(usy*(Uby-Urify)+usx*(Ubx-Urifx)+Ts*(Tb-Trif)+rhos*(Rhob-Rhorif)))
  +dirichlet;

varf op(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=-int2d(th,mpirank)(rhos*(drho*div(Ub)+Rhob*div(du)+ugradf(Ub,drho)+ugradf(du,Rhob)) 
								       //mass equation
								       -dp*div(us)+2.0/Rey*(Strain(du):Grad(us))-2.0/(3.0*Rey)*(div(du)*div(us))+Rhob*termnonlinear(du,Ub,us)
								       +drho*termnonlinear(Ub,Ub,us)+Rhob*termnonlinear(Ub,du,us)
								       //momentum
								  +Ts*(drho*ugradf(Ub,Tb)+Rhob*ugradf(Ub,dT)+Rhob*ugradf(du,Tb)+(gamma-1)*(drho*Tb*div(Ub)
								  	+Rhob*dT*div(Ub)+Rhob*Tb*div(du))
								  -gamma*(gamma-1.0)*M^2/Rey*(2.0*((Strain(du):Strain(Ub))+(Strain(Ub):Strain(du)))-2.0/3.0*(2.0*div(Ub)*div(du))))
								  +gamma/(Pr*Rey)*gradgrad(dT,Ts)
								       // energy
								       +ps*(gamma*M^2*dp-(drho*Tb+Rhob*dT))
								  )
  -int2d(th,mpirank)(AMPFORCE*(usy*duy+usx*dux+Ts*dT+rhos*drho))
  -int2d(th,mpirank)(sigma*(rhos*drho+Rhob*duy*usy+Rhob*dux*usx+Ts*Rhob*dT))+int2d(th,mpirank)(ssvv*(rhos*drho))
  +dirichlet;

varf jacobian(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=int2d(th,mpirank)(rhos*(drho*div(Ub)+Rhob*div(du)+ugradf(Ub,drho)+ugradf(du,Rhob)) 
								       //mass equation
								       -dp*div(us)+2.0/Rey*(Strain(du):Grad(us))-2.0/(3.0*Rey)*(div(du)*div(us))+Rhob*termnonlinear(du,Ub,us)+drho*termnonlinear(Ub,Ub,us)+Rhob*termnonlinear(Ub,du,us)
								       //momentum
								       +Ts*(drho*ugradf(Ub,Tb)+Rhob*ugradf(Ub,dT)+Rhob*ugradf(du,Tb)+(gamma-1)*(drho*Tb*div(Ub)+Rhob*dT*div(Ub)+Rhob*Tb*div(du))-gamma*(gamma-1.0)*M^2/Rey*(2.0*((Strain(du):Strain(Ub))+(Strain(Ub):Strain(du)))-2.0/3.0*(2.0*div(Ub)*div(du))))+gamma/(Pr*Rey)*gradgrad(dT,Ts)
								       // energy
								       +ps*(gamma*M^2*dp-(drho*Tb+Rhob*dT))
								  )
  +int2d(th,mpirank)(AMPFORCE*(usy*duy+usx*dux+Ts*dT+rhos*drho))
  +dirichlet;



varf bmat(def(du,dp,dT,drho),def(us,ps,Ts,rhos))=int2d(th,mpirank)(rhos*drho+Rhob*duy*usy+Rhob*dux*usx+Ts*Rhob*dT);


/////////////////////////////// LOAD BA$E FLOW ///////////////////////////////////////////
int comp=0;

{
//  LoadVecPETSc(Ubx[],pht+"Bflow_Re"+Rey+"_M"+Mbflow+".bin",comp);
                                {
		     cout << "- reading "+pht+"B_flow_Re"+Rey+"_M"+Mbflow+".bin"<< endl;
		                         ifstream file(pht+"B_flow_Re"+Rey+"_M"+Mbflow+".bin");
                                 file >> Ubx[];
                                 cout << "all ok!" << endl;
                                };
};

if(mpirank==0)
  {
    plot(th,Ubx,value=1);
    cout << "### Construction of matrices OP (complex) and B (COMPLEX AS WELL) for cartesian problem" << endl;
    cout << "### Re = " << Rey << endl; 
    cout << "### M = " << M << endl;
    cout << "### sigma = " << sigma << endl;
  }


/////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////// STABILITY WITH ARPACK //////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//                                  A-sigma*B=0



////////////////////////////// PHASE 0 - COMPUTE STABILITY OF THE BASE FLOW /////////////////////////

////// BUILD B-MATRIX
real ts=clock();
matrix<complex> Bloc= bmat(XXxxxH,XXxxxH,solver=CG,eps=1e-20);  //////// WARNING: THE SOLVER !!!!!!!!!!!!!!!
matrix<complex> B;
mpiAllReduce(Bloc,B,mpiCommWorld,mpiSUM);
if(mpirank==0)
  {
    cout << "### B is ok !" << endl;
    cout <<" ### B assembled in "<<clock()-ts<<" s"<<endl;
  }

/////  BUILD OP-MATRIX
ts=clock();
matrix<complex> OPloc=op(XXxxxH,XXxxxH);
matrix<complex> OP; 
mpiAllReduce(OPloc,OP,mpiCommWorld,mpiSUM);
set(OP,solver=sparsesolver,sparams=ssparams,tgv=ttgv); 
if(mpirank==0)
  {
    cout << "### OP is ok !" << endl;
    cout <<" ### OP assembled in "<<clock()-ts<<" s"<<endl;
  }


if(mpirank==0)
  {
    cout << "Matrices have been created..." << endl;
    cout << "... starting eigenvalues calculation..."<< endl;
  }

///////////////////// CALL TO ARPACK++ ///////////////////////////////////////////////////
int k=EigenValue(OP,B,sigma=(sigma),value=ev,vector=eux,tol=1e-6,maxit=0,ncv=ncv);    //Arpack call

ev = (ev);
lambda = ev[0];
lambdaPrev = 0;
uMx[] = eux[0][];
real NormUDirect = sqrt(2.0)*sqrt(int2d(th)((Rhob*abs(uMx)^2 + Rhob*abs(uMy)^2 + Rhob*abs(uMT)^2 + abs(uMrho)^2 )));
uMx[] = uMx[]/NormUDirect;
cuMx[] = conj(uMx[]);

real NormNL = abs(int2d(th)(2*(Amp^2)*(real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp)) )
						 + 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMx ) + real(conj(uMrho)*(1i*imag(lambda))*uMy) 
						    + (real(conj(uMrho)*ugradf(uM,Ubx))) + (real(conj(uMrho)*ugradf(uM,Uby))) + (real(Rhob*ugradfConj(uM,uMx))) 
						    + (real(Rhob*ugradfConj(uM,uMy))) + (real(conj(uMrho)*ugradf(Ub,uMx))) 
						    + (real(conj(uMrho)*ugradf(Ub,uMy))) )
							+ 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) + 
						 real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
						 + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
						 -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))) )
							+ 2*(Amp^2)*(real(conj(uMrho)*uMT))));

real Norm = sqrt(NormNL);
uMx[] = uMx[]/(Norm);
uMx[] = uMx[]*Af;
cuMx[] = conj(uMx[]);
NormNL = abs(int2d(th)(2*(Amp^2)*(real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp)) )
						 + 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMx ) + real(conj(uMrho)*(1i*imag(lambda))*uMy) 
						    + (real(conj(uMrho)*ugradf(uM,Ubx))) + (real(conj(uMrho)*ugradf(uM,Uby))) + (real(Rhob*ugradfConj(uM,uMx))) 
						    + (real(Rhob*ugradfConj(uM,uMy))) + (real(conj(uMrho)*ugradf(Ub,uMx))) 
						    + (real(conj(uMrho)*ugradf(Ub,uMy))) )
							+ 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) + 
						 real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
						 + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
						 -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))) )
							+ 2*(Amp^2)*(real(conj(uMrho)*uMT))));
cout << "Norm of the forcing =" << NormNL << endl; 
cout << "Finished Eigenvalue computation" << endl; 


/// TEST PRINTING ////
cout << "Saving Mean flow" << endl;
savevtk("WORK/MeanFlow_"+0+"_"+0+".vtk",th,Pb,[Ubx,Uby,0],Tb,Rhob,order=forder,dataname="Pb Ub Tb Rhob");
def(upr,ppr,Tpr,rhopr)=[real(uMx),real(uMy),real(uMp),real(uMT),real(uMrho)]; 
def(upi,ppi,Tpi,rhopi)=[imag(uMx),imag(uMy),imag(uMp),imag(uMT),imag(uMrho)];
cout << "Saving SC Mode" << endl;
savevtk("WORK/SCMode_"+0+"_"+0+".vtk",th,ppr,[uprx,upry,0],Tpr,rhopr,ppi,[upix,upiy,0],Tpi,rhopi,order=forder,dataname="pr ur Tr rhor pi ui Ti rhoi");
def(uRS,pRS,TRS,rhoRS) = [  real(conj(uMrho)*(1i*imag(lambda))*uMx ) + (real(conj(uMrho)*ugradf(uM,Ubx))) 
						  + (real(Rhob*ugradfConj(uM,uMx))) + (real(conj(uMrho)*ugradf(Ub,uMx))) , 

						  real(conj(uMrho)*(1i*imag(lambda))*uMy) + (real(conj(uMrho)*ugradf(uM,Uby)))
						  + (real(Rhob*ugradfConj(uM,uMy))) + (real(conj(uMrho)*ugradf(Ub,uMy))),

						  real(conj(uMrho)*uMT),

						  real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) 
						  + real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
					  + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
					  -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))),

					  real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp))
					  ];
savevtk("WORK/NLinearTerm_"+0+"_"+0+".vtk",th,pRS,[uRSx,uRSy,0],TRS,rhoRS,order=forder,dataname="pRS uRS TRS rhoRS");
NormUDirect = sqrt(int2d(th)((Rhob*abs(uMx)^2 + Rhob*abs(uMy)^2 + Rhob*abs(uMT)^2 + abs(uMrho)^2 )));
cout << "Norm of the eigenmode " << NormUDirect << endl;
/// TEST PRINTING ////

//////////////////////////////////////////////////////////////////////////////////////////

real ener=1.0;
int i;
int iter;
int iterSC=0;
int initerSC=0;
Unbx[] = Ubx[];

//////////////////////// INNER LOOP OF THE SELF-CONSISTENT METHOD /////////////////////////
while(abs(real(lambda)) > 1e-4)
{ 
	iter = 0;
	initerSC=0;
	iterSC++;
	while(abs(lambda-lambdaPrev) > 1e-5)
	{	
		initerSC++;
		cout << "Starting iterSC " << iterSC << " innner iteration SC " << initerSC << endl;
		while((ener>TOLLERANCENewton)&(i<=NITERATIONNEWTLOOP))
		    {
		      ts=clock();
		      
		      matrix NewtLoc=jacobian(XXxxxH,XXxxxH);
		      matrix Newt;
		      mpiAllReduce(NewtLoc,Newt,mpiCommWorld,mpiSUM);
		      if(mpirank==0)
				cout<<"Matrix formed in "<<clock()-ts<<" s"<<endl;  
		      real[int] rhsl= vNs(0,XXxxxH);
		      real[int] rhs(Newt.n);
		      mpiAllReduce(rhsl,rhs,mpiCommWorld,mpiSUM);
		      set(Newt,solver=sparsesolver,sparams=ssparams);
		      dux[] =  (Newt^-1*rhs);
		      ener=sqrt(int2d(th)(duy^2+dux^2)); 
		      if(mpirank==0)
			{
			  cout << "iter "<<i<<" | sqrt(int2d(th)(dux^2+duy^2)) = " << ener << endl;
			}
		      Ubx[]+=dux[];
		      i++;
		    }// end of NEWTON LOOP
		i = 0;
		ener = 1.0;
		real coef = 0.5;
		Ubx[] = coef*Ubx[] + (1.0-coef)*Unbx[];
		Unbx[] = Ubx[];

		sigma = lambda;
				////// BUILD B-MATRIX
		real ts=clock();
		matrix<complex> Bloc= bmat(XXxxxH,XXxxxH,solver=CG,eps=1e-20);  //////// WARNING: THE SOLVER !!!!!!!!!!!!!!!
		matrix<complex> B;
		mpiAllReduce(Bloc,B,mpiCommWorld,mpiSUM);
		if(mpirank==0)
		  {
		    cout << "### B is ok !" << endl;
		    cout <<" ### B assembled in "<<clock()-ts<<" s"<<endl;
		  }

		/////  BUILD OP-MATRIX
		ts=clock();
		matrix<complex> OPloc=op(XXxxxH,XXxxxH);
		matrix<complex> OP; 
		mpiAllReduce(OPloc,OP,mpiCommWorld,mpiSUM);
		set(OP,solver=sparsesolver,sparams=ssparams,tgv=ttgv); 
		if(mpirank==0)
		  {
		    cout << "### OP is ok !" << endl;
		    cout <<" ### OP assembled in "<<clock()-ts<<" s"<<endl;
		  }
		int k=EigenValue(OP,B,sigma=(sigma),value=ev,vector=eux,tol=1e-6,maxit=0,ncv=ncv);    //Arpack call
		lambdaPrev = lambda;
		lambda = ev[0];
		uMx[] = eux[0][];
		// NORMALIZATION OF THE FORCING
		real NormUDirect = sqrt(int2d(th)(Rhob*(abs(uMx)^2 + Rhob*abs(uMy)^2 + Rhob*abs(uMT)^2) + abs(uMrho)^2 ));
		uMx[] = uMx[]/NormUDirect;
		cuMx[] = conj(uMx[]);

		real NormNL = abs(int2d(th)(2*(Amp^2)*(real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp)) )
								 + 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMx ) + real(conj(uMrho)*(1i*imag(lambda))*uMy) 
								    + (real(conj(uMrho)*ugradf(uM,Ubx))) + (real(conj(uMrho)*ugradf(uM,Uby))) + (real(Rhob*ugradfConj(uM,uMx))) 
								    + (real(Rhob*ugradfConj(uM,uMy))) + (real(conj(uMrho)*ugradf(Ub,uMx))) 
								    + (real(conj(uMrho)*ugradf(Ub,uMy))) )
									+ 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) + 
								 real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
								 + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
								 -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))) )
									+ 2*(Amp^2)*(real(conj(uMrho)*uMT))));

		real Norm = sqrt(NormNL);
		uMx[] = uMx[]/(Norm);
		uMx[] = uMx[]*Af;
		cuMx[] = conj(uMx[]);
		// VERIFICATION
		NormNL = abs(int2d(th)(2*(Amp^2)*(real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp)) )
								 + 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMx ) + real(conj(uMrho)*(1i*imag(lambda))*uMy) 
								    + (real(conj(uMrho)*ugradf(uM,Ubx))) + (real(conj(uMrho)*ugradf(uM,Uby))) + (real(Rhob*ugradfConj(uM,uMx))) 
								    + (real(Rhob*ugradfConj(uM,uMy))) + (real(conj(uMrho)*ugradf(Ub,uMx))) 
								    + (real(conj(uMrho)*ugradf(Ub,uMy))) )
									+ 2*(Amp^2)*(real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) + 
								 real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
								 + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
								 -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))) )
									+ 2*(Amp^2)*(real(conj(uMrho)*uMT))));
		cout << "Norm of the forcing =" << NormNL << endl;  
		cout << "Lambda is " << lambda << endl;
		cout << "lambda prev is " << lambdaPrev << endl;
		cout << "Abs dif is " << abs(lambda-lambdaPrev) << endl;
		NormUDirect = sqrt(int2d(th)(Rhob*(abs(uMx)^2 + Rhob*abs(uMy)^2 + Rhob*abs(uMT)^2) + abs(uMrho)^2 ));
		cout << "Norm of the eigenmode " << NormUDirect << endl;
		cout << "Finished iterSC " << iterSC << " innner iteration SC " << initerSC << endl;
		//////////////////////////////////////////////////////////////////////////////////////////

		/// TEST PRINTING ////
		cout << "Saving Mean flow" << endl;
		savevtk("WORK/MeanFlow_"+iterSC+"_"+initerSC+".vtk",th,Pb,[Ubx,Uby,0],Tb,Rhob,order=forder,dataname="Pb Ub Tb Rhob");
		def(upr,ppr,Tpr,rhopr)=[real(uMx),real(uMy),real(uMp),real(uMT),real(uMrho)]; 
		   		def(upi,ppi,Tpi,rhopi)=[imag(uMx),imag(uMy),imag(uMp),imag(uMT),imag(uMrho)];
		   		cout << "Saving SC Mode" << endl;
				savevtk("WORK/SCMode_"+iterSC+"_"+initerSC+".vtk",th,ppr,[uprx,upry,0],Tpr,rhopr,ppi,[upix,upiy,0],Tpi,rhopi,order=forder,dataname="pr ur Tr rhor pi ui Ti rhoi");
				def(uRS,pRS,TRS,rhoRS) = [  real(conj(uMrho)*(1i*imag(lambda))*uMx ) + (real(conj(uMrho)*ugradf(uM,Ubx))) 
			  							  + (real(Rhob*ugradfConj(uM,uMx))) + (real(conj(uMrho)*ugradf(Ub,uMx))) , 

			  							  real(conj(uMrho)*(1i*imag(lambda))*uMy) + (real(conj(uMrho)*ugradf(uM,Uby)))
			  							  + (real(Rhob*ugradfConj(uM,uMy))) + (real(conj(uMrho)*ugradf(Ub,uMy))),

			  							  real(conj(uMrho)*uMT),

			  							  real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) 
			  							  + real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
										  + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
										  -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))),

										  real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp))
										  ];
		savevtk("WORK/NLinearTerm_"+iterSC+"_"+initerSC+".vtk",th,pRS,[uRSx,uRSy,0],TRS,rhoRS,order=forder,dataname="pRS uRSx uRSy TRS rhoRS");
/// TEST PRINTING ////
	}
	{
		cout << "real lambda " << real(lambda) << endl;
		if (Af < 0.1 && real(lambda) > 0)
		{
			Af += 0.025;
		}
		else
		{
			Af += 5.0*real(lambda);
		}
		Norm = sqrt(NormNL);
		uMx[] = uMx[]/(Norm);
		uMx[] = uMx[]*Af;
		cout << "Norm of the forcing amplitude " << Af << endl;
		NormUDirect = sqrt(int2d(th)((Rhob*abs(uMx)^2 + Rhob*abs(uMy)^2 + Rhob*abs(uMT)^2 + abs(uMrho)^2 )));
		cout << "Norm of the eigenmode " << NormUDirect << endl;
		cout << "Saving Mean flow" << endl;
		savevtk("WORK/MeanFlow_"+iterSC+"_"+initerSC+".vtk",th,Pb,[Ubx,Uby,0],Tb,Rhob,order=forder,dataname="Pb Ub Tb Rhob");
		def(upr,ppr,Tpr,rhopr)=[real(uMx),real(uMy),real(uMp),real(uMT),real(uMrho)]; 
   		def(upi,ppi,Tpi,rhopi)=[imag(uMx),imag(uMy),imag(uMp),imag(uMT),imag(uMrho)];
   		cout << "Saving SC Mode" << endl;
		savevtk("WORK/SCMode_"+iterSC+"_"+initerSC+".vtk",th,ppr,[uprx,upry,0],Tpr,rhopr,ppi,[upix,upiy,0],Tpi,rhopi,order=forder,dataname="pr ur Tr rhor pi ui Ti rhoi");
		def(uRS,pRS,TRS,rhoRS) = [  real(conj(uMrho)*(1i*imag(lambda))*uMx ) + (real(conj(uMrho)*ugradf(uM,Ubx))) 
	  							  + (real(Rhob*ugradfConj(uM,uMx))) + (real(conj(uMrho)*ugradf(Ub,uMx))) , 

	  							  real(conj(uMrho)*(1i*imag(lambda))*uMy) + (real(conj(uMrho)*ugradf(uM,Uby)))
	  							  + (real(Rhob*ugradfConj(uM,uMy))) + (real(conj(uMrho)*ugradf(Ub,uMy))),

	  							  real(conj(uMrho)*uMT),

	  							  real(conj(uMrho)*(1i*imag(lambda))*uMT) +  real(Rhob*ugradfConj(uM,uMT)) 
	  							  + real(conj(uMrho)*ugradf(Ub,uMT)) + real(conj(uMrho*ugradf(uM,Tb))) 
								  + (gamma-1.0)*(real(Rhob*conj(uMT)*div(uM)) + real(conj(uMrho)*uMT*div(Ub)) + real(conj(uMrho)*Tb*div(uM))) 
								  -gamma*(gamma-1)*Ma^2/Re*real((2.0*(((Strain(cuM)):Strain(uM)))-2.0/3.0*(conj(div(uM))*div(uM)))),

								  real(conj(uMrho)*div(uM)) + real(ugradfConj(uM,uMp))
								  ];
		savevtk("WORK/NLinearTerm_"+iterSC+"_"+initerSC+".vtk",th,pRS,[uRSx,uRSy,0],TRS,rhoRS,order=forder,dataname="pRS uRSx uRSy TRS rhoRS");
	 	cout << "Finished iterSC " << iterSC << " innner iteration SC " << initerSC << endl;

	}

		lambdaPrev = 1e2;
}


//////////////////////////////////// SAVE SPECTRA //////////////////////////////////////////
if(mpirank==0)
  {
    ofstream fileSpectra(ffdatadir+"/Spectra.out",append);
    ofstream fileSigmamax("Sigmamax.out",append);
    for (int j=0;j<k;j++)
      {
        fileSpectra  <<  j << " " <<  real(sigma) << " " << imag(sigma) << " " << Rey << " " << M << " " << real(ev[j]) << " " << imag(ev[j]) << endl;
	if(j==0)
	  { 
	    fileSigmamax << real(sigma) << " " << imag(sigma) << " "<< Rey << " " << M << " " << real(ev[j]) << " " << imag(ev[j]) << endl;
	  } 
      };
  };


mpiBarrier(mpiCommWorld);
