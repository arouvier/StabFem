/// 
/// file Macros_StabFem.edp
///
/// This file contains the case-dependent Macros for boundary conditions and postprocessing output.
///
/// This file can be customized according to requirements but it must contain the following macros :
///
/// boundary conditions : 
/// macro BoundaryconditionsBaseFlow(du,dp,dT,drho) 
/// macro BoundaryconditionsStability(du,us,dp,dT,drho,symmetry)
///
///
/// For post-processsing purposes :
/// macro SFWriteBaseFlow(filename,ux,uy,p,type,iter)
/// macro SFWriteMode(namefile,ux,uy,p,ev,shift,type,iter)
/// 
/// The following case is for the 2D cylinder and include the additional macros
/// required to compute lift and drag forces : Trainee(ux,uy,p,symmetry) and Portance(ux,uy,p,symmetry)
///
/// The file must also contain 


/// FIRST DEFINE THE SOLVER : IF AVAILABLE MUMPS WILL STRONGLY SPEED UP THE COMPUTATIONS.
/// IF MUMPS_seg is not insalled 
IFMACRO(!SOLVER)
macro SOLVER DEFAULT// POSSIBLE OPTIONS : DEFAULT, MUMPS, UMPFACK (to be avoided), SLEPC (not yet implemented)
ENDIFMACRO

IFMACRO(SOLVER,MUMPS)
load "MUMPS_seq" 
cout << " USING MUMPS_seq" << endl;
ENDIFMACRO
// END DEFINITION OF SOLVER
IFMACRO(!problemtype)
macro problemtype "2DComp"//EOM
ENDIFMACRO

string ffdatadir = "./WORK/";

string symmetryBaseFlow = 2; // symmetry propery of base flow :; set "S"(1) if domain is hzalf domain and "N" (2) if it is full domain
int bclat=4,bcinlet=1,bcoutflow=3,bcwall=2,bcaxis=6,bclatNOP=41;

macro Uinlet(y) 1.
// inlet flow for constant flow



macro BoundaryconditionsBaseFlow(du,dp,dT,drho)
	           on(bcinlet,du#x=Uinlet(y)-Ubx,du#y=0.0-Uby,drho=1.-Rhob,dT=1.-Tb)
	           /* bc normally used at lateral boundaries are neumann (nothing to specify) */ 
	         + on(bcoutflow,du#x=Uinlet(y)-Ubx,du#y=0.0-Uby,drho=1.-Rhob,dT=1.-Tb)  /* if you want to try no-penetration boundary (not optimal) */
             + on(bcwall,du#x=0.0-Ubx,du#y=0.0-Uby)
             + int1d(th,bcaxis)(du#x*us#x*1e30*(symmetryBaseFlow=="A")+du#y*us#y*1e30*(symmetryBaseFlow=="S"))       
//EOM

macro BoundaryconditionsStability(du,us,dp,dT,drho,symmetry)
	           on(bcinlet,dux#=0,du#y=0.0,dT=0.0,drho=0.0)
	            /* bc normally used at lateral boundaries are neumann (nothing to specify) */ 
	         + on(bcoutflow,dux#=0,du#y=0.0,dT=0.0,drho=0.0)  /* if you want to try no-penetration boundary (not optimal) */
             + on(bcwall,du#x=0.0,du#y=0.0)
             + int1d(th,bcaxis)(du#x*us#x*1e30*(symmetry==0)+du#y*us#y*1e30*(symmetry==1))  // I am not sure what to impose on T,rho and p 
//EOM



// HERE ARE SOME MACROS WHICH ARE USEFUL FOR POST-PROCESSING WITH A 2D FLOW OVER A BLUFF BODY

macro Trainee(u,symmetry)   
	(

	int1d(th,2,21,22,23)((u#p-1)/(gamma*Ma^2)*N.x)
	-nu*int1d(th,2,21,22,23)( (((4./3.)*dx(u#x) - (2./3.)*dy(u#y))*N.x+ (dx(u#y)+dy(u#x))*N.y))
	
	)
//EOM
	

macro Portance(u,symmetry)   
	(
	(1*(symmetry==2)+2*(symmetry==0))
	*(
	int1d(th,2,21,22,23)(((u#p-1)/(gamma*Ma^2))*N.y)
	-nu*int1d(th,2,21,22,23)( (((4./3.)*dy(u#y) - (2./3.)*dx(u#x))*N.y+(dx(u#y)+dy(u#x))*N.x))
	)
	)
//EOM



macro SFWriteMesh(filename,TH)
{
     ofstream fileFF(filename);
     fileFF << "### MESH generated by Freefem++ ; " << endl;
     fileFF << "2D mesh" << endl;
     fileFF << "Format :" << endl;
	 fileFF << "int np int Ndof real deltamin real deltamax" ;
	 string PostProcessMeshDescription = " real deltaA real deltaB real deltaC real deltaD" ; /*description of customizable part*/
	 fileFF << PostProcessMeshDescription << endl << endl ;
     fespace femp1N(TH,P1);
     fespace femp2xfemp2xfemp1N(TH,[P2,P2,P1]);	  
     femp2xfemp2xfemp1N [uNx,uNy,uNp];
	 fileFF << TH.nv <<  endl << uNx[].n << endl ;
 	 cout << "#### Mesh information :" << endl;  
     cout << "## Number of vertices    " << TH.nv <<  endl;
	 cout << "## Number of DOF : " << uNx[].n << endl << endl;  
 	 femp1N delta = hTriangle;
	cout << "## delta min : " << delta[].min << endl;
	cout << "## delta max : " << delta[].max << endl;
	fileFF << delta[].min << endl;
	fileFF << delta[].max << endl;   
    /*Next is customizable part ; here determination of the grid size at several points */
    real[int] xprobe = [0,	2.5,	4,	10];
    real[int] yprobe = [.5, 	.5,	0,	0]; 
	cout << "## delta(0,.5) : ( boundary layer) : " << delta(xprobe(0),yprobe(0)) << endl ;
	cout << "## delta(2.5,.5) : ( sensitivity) : " << delta(xprobe(1),yprobe(1)) << endl ;
	cout << "## delta(4,0) : ( wake ) : " << delta(xprobe(2),yprobe(2)) << endl << endl ;
    cout << "## delta(10,0) : ( far wake ) : " << delta(xprobe(3),yprobe(3)) << endl << endl ;
	for(int ii = 0; ii<4;ii++){ fileFF << delta(xprobe(ii),yprobe(ii)) << endl ;}	
 
}; 	 
//EOM



macro SFWriteBaseFlow(filename,u,typeFlow,iter)
	if(iter>=0)
	{
	fespace p1forff2m(th,P1);  
	p1forff2m xx,yy;
	xx=x;
	yy=y;
    p1forff2m ut,vt,pt,vort;
	ut=u#x;
	vt=u#y;
	pt=u#p;
	vort=dy(u#x)-dx(u#y); /* vorticity */
	p1forff2m psi,phi;
/*	solve Laplace(psi,phi, solver = CG) */
/* 	= int2d(th)(dx(psi)*dx(phi)+dy(psi)*dy(phi)) */
/* 	- int2d(th)(-vort*phi) */
/* 	- int1d(th,bcinlet,bcoutflow,bclat,bcwall)((-N.x*ux+N.y*uy)*phi); */   
	ofstream file(filename);
   	{
	file << "### Data generated by Freefem++ ; " << endl;
    file << typeFlow << endl;
    file << "Format : " << endl;	
	file << "real Re P1 ux P1 uy P1 p P1 vort P1 psi real iter " ;
	string PostProcessBaseFlowDescription = "real Fx real Lx"; /* customizable output */ 
	file << PostProcessBaseFlowDescription << endl << endl ; 
	file << Re << endl;	
			for (int j=0;j<ut[].n ; j++) file << ut[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << pt[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << vort[][j] << endl;
			for (int j=0;j<ut[].n ; j++) file << psi[][j] << endl;
			file << iter << endl;
	
	cout << "#### customisable output for WAKE OF A 2D BLUFF BODY : " << endl; 
    /* Calcul de la trainee */
    real DragMode = Trainee(u,symmetryBaseFlow);
	cout << "#    Fx =  " << DragMode << endl; 
    file << DragMode << " " ; 
    real Lx, Uap, Uav;
    if(iter>0)
    {
    /* mesure de la longueur de recirculation */
		{
		real dx = 0.001;real Uav = -2e-10;real Uap=-1e-10;int ix;
			for(ix=1;ix<20000;ix++)
			{   
				Uap =u#x(0.5+ix*dx,0);
				if(Uap*Uav<0){break;};
				Uav = Uap;	
			}
			real xav = 0.5+(ix-1)*dx; 
			real xap = 0.5+ix*dx;
			Lx = xav *(Uap)/(Uap-Uav) + xap *(-Uav)/(Uap-Uav);
		}	
    }
    else
    { 
    	Lx = 0;
    };
    cout << "#    Recirculation length = " << Lx << endl << endl; 
		file << Lx << endl;
     
	}
	}
	else
	{
	ofstream file(filename);
	file << "### Data generated by Freefem++ ; " << endl;
    file << "BaseFlow NOT CONVERGED" << endl;
    file << "Format : " << endl;	
	file << "int iter " << endl;
	file << -1 << endl;
	};
//EOM
	
	
	
macro SFWriteMode(namefile,u,ev,shift,typeFlow,iter)
		 {
		 ofstream file(namefile);
   		 fespace p1forff2m(th,P1); 
		 p1forff2m xx,yy;
		 xx=x;
		 yy=y;
	p1forff2m<complex> ux1,uy1,pp1,vort1,rho1,T1;
 		 file << "### Data generated by Freefem++ ; " << endl;
    	 file << typeFlow << endl;
    	 file << "Format :" << endl;
    	 string descriptionFF;
    	 if(typeFlow=="EigenModeD"||typeFlow=="HarmonicMode")
    	 	{  descriptionFF="real Re complex lambda complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1 P1c rho1 P1c T1 real AEnergy complex Fy"; }
    	 else if(typeFlow=="EigenModeA") 
    	    {  descriptionFF="real Re complex lambda complex shift int iter P1c ux1Adj P1c uy1Adj P1c p1Adj P1c vort1Adj P1c rho1Adj P1c T1Adj real AEnergyAdj complex FyAdj"; }
    	 else if(typeFlow=="SecondHarmonicMode") 
    	    {  descriptionFF="real Re complex lambda complex shift int iter P1c ux1 P1c uy1 P1c p1 P1c vort1 real AEnergy complex Fx"; }
	   	file << descriptionFF << endl << endl ; 
		file << Re  << endl << real(ev) << " " << imag(ev) << " " << real(shift) << " " << imag(shift) << " " << iter << endl << endl;
 		ux1=u#x;
		uy1=u#y;
		pp1=u#p;
		rho1 =u#rho;
		T1 = u#T;
		vort1=dy(u#x)-dx(u#y);
		
		for (int j=0;j<ux1[].n ; j++) file << real(ux1[][j]) << " " << imag(ux1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(uy1[][j]) << " " << imag(uy1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(pp1[][j]) << " " << imag(pp1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(vort1[][j]) << " " << imag(vort1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(rho1[][j]) << " " << imag(rho1[][j]) << endl;
		for (int j=0;j<ux1[].n ; j++) file << real(T1[][j]) << " " << imag(T1[][j]) << endl;
		
		file << endl;
		if(typeFlow=="EigenModeD"||typeFlow=="EigenModeA")
		{
		cout << "#### customisable output for a mode in the WAKE OF A 2D BLUFF BODY : " << endl; 
		real AEnergyMode = sqrt(int2d(th)(abs(Rhob*u#x)^2+abs(Rhob*u#y)^2+abs(rho1)^2+abs(Rhob*T1)^2));
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;
		complex LiftMode = Portance(u,2); 
		cout << "#   Fy = " << LiftMode << " exp( lambda t) + c.c. " << endl;
		file << real(LiftMode) << " " << imag(LiftMode) << endl;
		}
		if(typeFlow=="HarmonicMode")
		{
		cout << "#### customisable output for a SC mode in the WAKE OF A 2D BLUFF BODY : " << endl; 
		real AEnergyMode = sqrt(0.5*int2d(th)(abs(Rhob*u#x)^2+abs(Rhob*u#y)^2+abs(rho1)^2+abs(Rhob*T1)^2));  /* here factor 1 because 2 half domaines and time-average of cos^2 and sin^2 = 1/2. */ 
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;
		complex LiftMode = Portance(u,2); 
		cout << "#   Fy = " << real(LiftMode) << " * cos( omega t) + " << -imag(LiftMode) << " * sin( omega t) + "  << endl;
		file << real(LiftMode) << " " << imag(LiftMode) << endl;
		}
		if(typeFlow=="SecondHarmonicMode")
		{
		cout << "#### customisable output for a HB-2 mode in the WAKE OF A 2D BLUFF BODY : " << endl; 
		real AEnergyMode = sqrt(0.5*int2d(th)(abs(Rhob*u#x)^2+abs(Rhob*u#y)^2+abs(rho1)^2+abs(Rhob*T1)^2));  /* here factor 1 because 2 half domaines and time-average of cos^2 and sin^2 = 1/2. */ 
		cout << "#   Amplitude (with definition of Mantic-Lugo) = " << AEnergyMode << endl;
		file << AEnergyMode << endl;
		complex DragMode = Trainee(u,2); 
		cout << "#   Fx = " << real(DragMode) << " * cos( 2 omega t) + " << -imag(DragMode) << " * sin( 2 omega t) + "  << endl;
		file << real(DragMode) << " " << imag(DragMode) << endl;
		}
		
		
		
		};
//EOM	




//macro PostProcessBaseFlowOutput(file,u1,u2,p)
	
