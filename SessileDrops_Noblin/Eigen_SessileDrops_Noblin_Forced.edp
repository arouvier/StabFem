//  Computation of the eigenvalues and eigenvectors for sessile drop forced oscillations
//  (inviscid theory)
//   By Nabil ACHOUR 
// ----------------------------------------
// the problem is potential : u = i grad (phi) (mind the "i" factor !) 
// PROBLEM : find $\omega$ and $[phi,eta]$  such that
// 	$$ \Delta \phi = 0 $$ inside the domain
// 	$$ \omega \phi = \gamma (-(K0a^2+K0b^2) \eta - \partial^2 \eta / \partial s^2 + m^2/r^2 \eta $$ on the free surface
// 	$$ \omega \eta = grad \phi \dot n $$ on the free surface 
// 
//-----------------------------------------

// Remarque : phi et eta sont definis comme des champs P2 sur le volume, meme si eta n'a de sens qu'à la surface

// Definition des parametres necessaires au bon fonctionnement des macros
string surfaceorder="direct"; /// possibilities : "direct", "reverse" (use reverse to fit with matlab "meniscus" program);
string typestart = "pined"; // possibilites : "pined", "axis", "plane", "angle"
string typeend = "axis";    // possibilites : "pined", "axis", "plane", "angle"
int anglecut =2; // position of the "cut" in the tan2 determination. 
                  // 0 -> alpha in [-pi,pi]; 1-> [-pi/2,3pi/2]; 2 -> [0,pi] ; 3 -> [-3*pi/2,pi/2] 

verbosity=0;
//load "UMFPACK64"

// constantes physiques 
real g=9.81;                 // Gravity field
real gamma = 72.8;	  // Surface Tension
real R=4.6;
real dpdz ;

int  testDIR = exec("ls RES_STAB > OUTRES");
	
	if (testDIR!=0)
		{
		cout << "Creation d'un repertoire RES_STAB" << endl;
		exec("mkdir RES_STAB");
		}

// Parametres du calcul
int m;  // Nombre d'onde
int Nval = 10;  // nb. de valeurs propres à calculer
int Nmodes = 10; // nb. de vecteurs propres à post-traiter

//cout << " ENTREZ Le nombre d'onde m ?" << endl;
//cin >> m;
m = 0;
cout << "==> Calcul du pb force pour m = " << m << endl;


real omega;






////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE INITIAUX
//
////////////////////////////////////////////////////////////////
//MeshVessel_guess.msh

mesh Th=readmesh("Mesh_Translator_guess.msh");

//mesh Th=readmesh("mesh_guess.msh");

mesh MeshInt=Th; // autre nom possible...
mesh Shempty=MeshInt; 	
real L, K0, Vol, Area;

include "MG.edp"

// Calcul des normales et des courbures
CalcGeomSurf;

// fichier info geom

{
ifstream fileG("Infos_Geom.txt");
fileG >> L; 
fileG >> Vol;
fileG >> K0;
fileG >> dpdz; 
fileG >> Area;
//fileG >> Nsurface;
}
dpdz= 979.04; // warning in future






////////////////////////////////////////////////////
//
//  DECLARATION DES MATRICES
//
/////////////////////////////////////////////////////


//fespace Vh(Th,P1);
fespace VhxVh(Th,[P1,P1]);

VhxVh [phi,eta],[q,v];
Vh phiB,etaB,qB,vB,phiA,etaA,qA,vA;

real shift = 0;  // value of the shift
real RegEta = 1e-8;



// Construction de la matrice A
// ANCIENNE METHODE
//varf a([phi,eta],[q,v]) = // order of test fun. shoud be [v,q] for SLEPC ; [q,v] instead
// Laplacian	  
//	  int2d(Th)(  (dx(phi)*dx(v) + dy(phi)*dy(v)+(m^2+1e-8)*phi*v/(x^2+1e-30))*x  ) 
//	  		// desingularisation term necessary if m=0 ; don't know why
// Curvature	  
//	+ int1d(Th,2)(gamma*((Ds(eta))*(Ds(q))-(K0a^2+K0b^2)*eta*q+m^2/(x^2+1e-30)*q*eta)*abs(x))
// gravity
//	+int1d(Th,2)(dpdz*eta*q*N0z*x)
// shift 
//	- int1d(Th,2)(shift*(eta*v+q*phi)*x)
// Pour regulariser eta dans le volume	
//		+ int2d(Th)((dx(q)*dx(eta)+dy(q)*dy(eta))*RegEta*abs(x)) //  deuxieme idee : laplacien 
// Conditions limites par penalisation
//+ int1d(Th,1,5)(1e30*eta*q*abs(x)) // pour ligne de contact fixee
//+ int1d(Th,1)(m*phi*v*1e30) // CL axe pour m different de 0
//;
//matrix A= a(VhxVh,VhxVh,solver=UMFPACK);


// Nouvelle methode par blocs
varf avphi(phiA,vA)=	  
	int2d(Th)(  (dx(phiA)*dx(vA) + dy(phiA)*dy(vA)+(m^2+1e-8)*phiA*vA/(x^2+1e-30))*x  ) 
	+ int1d(Th,1)(m*phiA*vA*1e30)
;

varf aqeta(etaA,qA)=
	int1d(Th,2)(gamma*((Ds(etaA))*(Ds(qA))-(K0a^2+K0b^2)*etaA*qA+m^2/(x^2+1e-30)*qA*etaA)*abs(x))
	+int1d(Th,2)(dpdz*etaA*qA*N0z*x)
	+ int2d(Th)((dx(qA)*dx(etaA)+dy(qA)*dy(etaA))*RegEta*abs(x))
	+ int1d(Th,1,5)(1e30*etaA*qA*abs(x))
	+on(55,etaA=0)
;

/*varf aveta(etaA,vA)=
	int2d(Th)((dx(vA)*dx(etaA)+dy(vA)*dy(etaA))*1e-30*abs(x))//
	- int1d(Th,2)(shift*(etaA*vA)*x)
;

varf aqphi(phiA,qA)=
	int2d(Th)( 1e-30*(dx(phiA)*dx(qA) + dy(phiA)*dy(qA))*x  ) //
	- int1d(Th,2)(shift*(qA*phiA)*x)
;*/
matrix Avphi = avphi(Vh,Vh,solver=UMFPACK);
//matrix Aqphi = aqphi(Vh,Vh,solver=UMFPACK);
matrix Aqeta = aqeta(Vh,Vh,solver=UMFPACK); 
//matrix Aveta = aveta(Vh,Vh,solver=UMFPACK); 
//Aqeta(IndexPointSurf(0),IndexPointSurf(0)) = Aqeta(IndexPointSurf(0),IndexPointSurf(0))+gamma*cos(alphaPointSurf(0))*K0aPointSurf(0)*xPointSurf(0);

matrix A = [[0,Aqeta],[Avphi,0]];
set(A,solver =UMFPACK);

// Construction de la matrice B
// ANCIENNE METHODE
//varf b([phi,eta],[q,v]) = 
//        int1d(Th,2)(eta*v*x)
//       +int1d(Th,2)(q*phi*x);
//matrix B= b(VhxVh,VhxVh,solver=GMRES,eps=1e-20); 

// Nouvelle methode par blocs
varf bqphi(phiB,qB) = 
       int1d(Th,2)(qB*phiB*x);

varf bveta(etaB,vB) = 
        int1d(Th,2)(etaB*vB*x);

matrix Bqphi = bqphi(Vh,Vh,solver=GMRES,eps=1e-20); 
matrix Bveta = bveta(Vh,Vh,solver=GMRES,eps=1e-20); 
matrix B = [[Bqphi,0],[0,Bveta]];
set(B,solver =GMRES);

varf omegabqphi(phiB,qB) = 
       int1d(Th,2)(qB*phiB*x*omega);

varf omegabveta(etaB,vB) = 
        int1d(Th,2)(etaB*vB*x*omega);

////////////////////////////////////////////////////
//
//  RESOLUTION DU PB FORCE AVEC SECOND MEMBRE
//
/////////////////////////////////////////////////////
Vol = 2*pi*int2d(MeshInt)(x);

string RESSTAB="./RES_STAB/";
ofstream resout(RESSTAB+"SessileDropsForced_V="+Vol+".txt");
real omegastart, omegaend, omegastep; 
// boucle sur omega
cout << "Donner une valeur de omega start end step :"<< endl; 
cin >> omegastart >> omegaend >> omegastep;

for(omega =omegastart;omega<omegaend;omega = omega+omegastep)
{
// assemblage de la matrice A-omega B
matrix omegaBqphi = omegabqphi(Vh,Vh,solver=GMRES,eps=1e-20); 
matrix omegaBveta = omegabveta(Vh,Vh,solver=GMRES,eps=1e-20); 


matrix OP = [[omegaBqphi,Aqeta],[Avphi,omegaBveta]];

varf secondmembreeta(etaNewton,test) = 
			int1d(Shempty,2)(y*test*abs(x));

varf secondmembrephi(Phi,testp) = 
			int1d(Shempty,2)(1e-30*testp);


real[int] SMeta = secondmembreeta(0,Vh);
real[int] SMphi = secondmembrephi(0,Vh);
real[int] SM = [SMeta,SMphi];
real[int] X(SM.n);
set(OP,solver=sparsesolver);

X= OP^-1*SM;

//X.l2 est un critere numerique
cout<< " omega = " << omega << "    ; Norme l2="<<X.l2 ; // ajouter valeur sur l'axe 
eta[] = X; // on recupere eta et phi dans un champ "composite"
Vh Xeta;
Vh Xphi;
Xeta = eta;
Xphi = phi;
// criteres physiques 
real etaaxis = Xeta[](IndexPointSurf(Nsurface));
real Energie = int2d(Th)((dx(Xphi)^2+dy(Xphi)^2)*x*pi);
cout << " ; etaaxis = " << etaaxis << " ; Energie = " << Energie << endl;
// mettre le resutat dans un fichier
ofstream resout( RESSTAB+"SessileDropsForced_V="+Vol+".txt",append);
resout << omega << " " << X.l2 << " " << etaaxis << " " << Energie <<endl;
	
}// fin de la boucle




cout << " ####### Infos Geometrie    " << endl << endl;
cout << " ## Volume                : " << Vol << endl;
cout << " ## K0                    : " << K0 << endl;
cout << " ## Bo                    : " << dpdz*1^2/gamma << endl;
cout << " ## SURFACE               : " << Area << endl;
cout << " ## Densite maillage      : " << Nsurface << endl;
cout << "END"<< endl;

