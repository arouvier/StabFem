
// Programme adapte a partir de Newton_FormePont (N. Achour & DF, 16 fevrier 2018 - ) 


verbosity = 0; // bavardage a l'ecran
 real intwait = 0; // 1 si l'on veut des traces intermediaires
int idebug = 0;

// Calcul de la forme d'equilibre d'un pont liquide axisymetrique


// Parametres :
real Rbase = 1; // On prend le rayon du tube capillaire comme echelle de longueur (eviter de changer !)

// La forme d'equilibre correspond a  K0 = constante
// (DF fev 2017 : plus exactement gamma K0 =  P0 + rhog z

// La methode consiste a deformer iterativement la forme 
// de la surface jusqu'a aboutir a cet equilibre.

// Remarque : la forme est parametree par la courbure K0, donc la methode ne
// marche pas au voisinage d'un extremum de K0... 
// (dans ce cas utiliser Newton_FormePont_Volume)

// La forme initiale est lue dans le fichier "MeshBridge_guess.msh". 




real gamma = 1; // prevoir de rentrer la valeur au clavier


real P0;
cout << " ENTREZ LA VALEUR DE (P0-Pext) ?" << endl;
cin >> P0;
real K0 = P0/gamma;

cout << "==> Courbure a l'altitude z=0 : " << K0 << endl;

real dpdz;
cout << " ENTREZ LA VALEUR Du Bond inverse (delta rho g R^2)/(sigma)  " << endl;
cin >> dpdz;
cout << "==> dpdz = " << dpdz << endl;






////////////////////////////////////////////////////////////////
//
// MAILLAGE ET GEOMETRIE INITIAUX
//
////////////////////////////////////////////////////////////////


mesh MeshInt=readmesh("mesh_guessNabil.msh");


// NB : pour la discretisation de eta et autres variables definies sur la surface
// on utilise le champ d'EF sur le maillage "SHEMPTY"
// deux possibilitÃ©s : 1/ shempty = MeshInt (on utilise le maillage complet)
//                     2/ shempty = emptymesh(MeshInt) (on utilise un maillage 'vide')
// attention il faut aussi le changer ligne 252


//mesh Shempty=emptymesh(MeshInt); 	// Maillage 'surface'
mesh Shempty=MeshInt;                  

matrix A;
//real[int] RHS(Shempty.nv);



include "Macros_Geometrie_Surface.edp"

// Calcul des normales et des courbures
CalcGeomSurf;

// Plots
ExtendC;
plot(K0ext,[N0r,N0z],fill=1,value=1,wait=intwait,cmm="Normales de la forme initiale et Courbure K0 prolongee dans le plan");
// plot(K0ext,fill=1,value=1,wait=0,cmm="Courbure K0 prolongee dans le plan");





////////////////////////////////////////////////////////////////
//
// ALGORITHME DE NEWTON
//
////////////////////////////////////////////////////////////////




real Res=1, Res1=2;
int Itmax = 15;
int conv=1, conv1=1, conv2=1;

for(int i = 0; (i<Itmax)&(Res>1e-7); i++)
{
// Calcul de la deformation de surface et deplacement du maillage

//CalcEta;

//CalcEta2018; // nouvelle version avec constuction explicite de la matrice.
//en dur

{
 varf CalcEtaMatrice(etaNewton,test) = 
        int1d(Shempty,2)((gamma*(K0a+K0b)-(P0-dpdz*y))*test*abs(x)) 
                        /* 1ere integrale : RHS */ 
     + int1d(Shempty,2)((gamma*(Ds(etaNewton))*(Ds(test))-gamma*(K0a^2+K0b^2)*etaNewton*test+dpdz*etaNewton*test*N0z)*abs(x)) 
                        /* 2e integrale : matrice A */
	//+int1d(Shempty,11)(test*1e-20)
		    + int2d(Shempty)(1e-20*etaNewton*test) /* conditions limite */
		    +on(5,etaNewton=0) // dirichlet sur la surface (cas pined)
                    //+on(11,etaNewton=0) 
;


A =CalcEtaMatrice(Wh1,Wh1,tgv=1e30);//solver=sparsesolver);
cout << " OK pour A..." << endl ;


 int Nt = etaNewton[].n;
cout << Nt << endl ;
if(idebug >1000)
{
cout << " Deconstruction de la matrice (partie restreinte aux DDL de la surface)" << endl;
real[int,int] matAfiltree(Nsurface,Nsurface);

 


for(int isurf = 0; isurf < Nsurface+1; isurf++)
  {
  cout << "ligne " << isurf << " :     ( nv(isurf) = " << IndexPointSurf(isurf) << " ) "  << endl;
  for(int jsurf = 0; jsurf < Nsurface+1; jsurf++)
    {

   real[int] Xi(Nt) ;
   Xi(IndexPointSurf(isurf))=1;
   real[int] Xj(Nt) ;
   Xj(IndexPointSurf(jsurf))=1;
   real[int] Axi(Nt);
   Axi  = A*Xi;
   real Aij = Xj'*Axi;   
	matAfiltree(isurf,jsurf) = A(isurf,jsurf) ;
   if(Aij!=0)
      {
   cout << " Element (" << isurf+1 << "," << jsurf+1 << ") : " << Aij << endl;
      };
//	
    };
  cout << endl;
  };
};

if(idebug >10)
{
cout << endl << endl << "#######################" 
<<  " Deconstruction de la matrice (on regarde tous les termes)" << endl;
//real[int,int] matA = A;



for(int iv = 0; iv < Nt; iv++)
  {
  cout << "ligne " << iv << " : " << endl;
  for(int jv = 0; jv < Nt; jv++)
    {

   real[int] Xi(Nt) ;
   Xi(iv)=1;
   real[int] Xj(Nt) ;
   Xj(jv)=1;
   real[int] Axi(Nt);
   Axi  = A*Xi;
   real Aij = Xj'*Axi;   
   if(Aij!=0)
      {
   cout << " Element (" << iv << "," << jv << ") : " << Aij << endl;
      };
//	
    };
  cout << endl;
  };
};

//IndexPointSurf(ksurf)



real[int] RHS = CalcEtaMatrice(0,Wh1,tgv=1e30);
cout << " OK pour RHS..." << endl ;




RHS = -RHS;
// real[int] RHSfilte(Nsurface);

if(idebug==0)
{
cout << " Deconstruction du RHS (DDL sur la surface) ..." << endl ;
for(int isurf = 0; isurf < Nsurface+1; isurf++)
  {
cout << "RHs(" << isurf+1 << ") = " << RHS(IndexPointSurf(isurf)) << endl;
//RHSfiltre(isurf) = RHS(IndexPointSurf(isurf));
  }

/*cout << " Deconstruction du RHS (tous les DDL) ..." << endl ;
for(int iv = 0; iv < Nt; iv++)
  {
cout << "RHs(" << iv << ") = " << RHS(iv) << endl;
  }*/
};


cout << " size(RHS) = " << RHS.n << endl;
cout << " size(A) " << A.n << endl ;


etaNewton[] = A^-1*RHS;

// idee : remplacer ca par :
// real[int] etafiltre(Nsurface);
// etafiltre = matAfiltre^(-1)*RHSfiltre;
// puis reremplir le tableau etaNewton[];

 



if(idebug>10)
{
cout << " deconstruction de etaNewton... (DDL en surface) " << endl ;
for(int isurf = 0; isurf < Nsurface+1; isurf++)
  {
cout << "Eta(" << isurf+1 << ") = " << etaNewton[](IndexPointSurf(isurf)) << endl;
  }
/*cout << " deconstruction de etaNewton... (tous les DDL) " << endl ;
for(int iv = 0; iv < Nt; iv++)
  {
cout << "Eta(" << iv << ") = " << etaNewton[](iv) << endl;
  }*/
};



}




// ExtendEta; plot(etaext,fill=1,value=1,wait=intwait,cmm="Eta prolonge iteration "+i); //(pour visualisation)
plot(etaNewton,fill=1,value=1,wait=intwait,cmm="Eta prolonge iteration "+i); //(pour visualisation)

CalcDef;
plot([ur,uz],fill=1,value=1,wait=intwait,cmm="champ de deformation calcule iteration "+i);

MeshInt = movemesh(MeshInt,[x+ur,y+uz]);
plot(MeshInt,Shempty,cmm="Deformation maillage iteration "+i,wait=1);

//Shempty = emptymesh(MeshInt);
//Shempty = MeshInt;
Shempty = movemesh(Shempty,[x+ur,y+uz]);
//Shempty = movemesh(Shempty,[x+etaNewton*N0r,y+etaNewton*N0z]);

// Recalcul des normales et courbures
CalcGeomSurf;



ExtendC;
K0ext = K0ext-(P0-dpdz*y)/gamma;
plot(K0ext,fill=1,value=1,cmm="Erreur courbure iteration "+i,wait=intwait);
Res = int1d(Shempty,2)( (K0a+K0b-(K0-dpdz*y))^2 );
//Res=max(abs(RHS));
cout << " iteration " << i << " : Res = " << Res << endl;




// verif convergence
conv = (Res<Res1); // on verifie si l'erreur diminue au cours des 3 dernieres iterations
Res1 = Res;
conv2=conv1;
conv1=conv;
}

//  ----------------------------------------------------------------------------------------------------
// Fin du Newton 
//  ----------------------------------------------------------------------------------------------------

cout << endl << " ------- NEWTON TERMINE -------" << endl << endl;
cout << "Criteres de convergence = " << conv << " " << conv1 << " " << conv2 << endl;
// Ecriture du maillage dans un fichier


if (conv*conv1*conv2==0)
{ 
cout << "ATTENTION : convergence du Newton douteuse..." << endl;
savemesh(MeshInt,"MeshBridge_NoConvNabil.msh");
savemesh(MeshInt,"MeshDropNabil.msh");
}
else
{	
cout << "solution convergee : on copie le maillage dans MeshDraop_guess_Nabil.msh" << endl;
 savemesh(MeshInt,"MeshDropNabil.msh");
 savemesh(MeshInt,"MeshBridge_guess_Nabil.msh");
};

////////////////////////////////////////////////////////////////
//
// POST-TRAITEMENT : fichiers Infos_Geom.txt et Geom_Surface.txt
//
////////////////////////////////////////////////////////////////


// Construction de vecteurs contenant les points de la surface numerotes (cf. macro)  

SurfaceNumbering(IndexPointSurf,xPointSurf,yPointSurf,S0PointSurf,Nsurface);


// ##################  ECRITURE D'un fichier contenant la geometrie de la surface ############ 
real LongueurSurface = S0PointSurf(Nsurface);
ofstream filegeom("Geom_SurfaceNabil.txt") ; // format : s0 x y K0a K0b N0r N0z,  ds(K0a K0b N0r N0z)
// (Rem. abcisse s0 comptee a partir du sommet)
	PP1 dsN0r = Ds(N0r);
	PP1 dsN0z = Ds(N0z);
	PP1 dsK0b = Ds(K0a);
	PP1 dsK0a = Ds(K0b);
for(int ksurf=Nsurface;ksurf>-1;ksurf--) 
	{
	filegeom << S0PointSurf(ksurf) << "   " << xPointSurf(ksurf) << "  "  << yPointSurf(ksurf) << "   " 
	<< K0a(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   " << K0b(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   "
	<< N0r(xPointSurf(ksurf), yPointSurf(ksurf) )<< "   " << N0z[][IndexPointSurf(ksurf)  ] << "   " 
	<< dsK0a(xPointSurf(ksurf), yPointSurf(ksurf) )<< "   " << dsK0b(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   "
	<< dsN0r(xPointSurf(ksurf), yPointSurf(ksurf) ) << "   " << dsN0z(xPointSurf(ksurf), yPointSurf(ksurf) ) << endl ;
	};
//



// Calcul de diverses quantites interessantes
real Vol = 2*pi*int2d(MeshInt)(x); // Volume
real Area = 2*pi*int1d(MeshInt,2)(x); // Surface
real Rmax = xPointSurf(0:Nsurface).max;
real Rmin = xPointSurf(0:Nsurface).min;
real Zmax = yPointSurf(0:Nsurface).max;
real Zmin = yPointSurf(0:Nsurface).min;
real Z1 = yPointSurf(0);
real Z2 = yPointSurf(Nsurface);
real L = Z2-Z1;


cout << " ####### STATISTIQUES sur la forme : " << endl << endl;
cout << " ## Longueur                        : " << L << endl;
cout << " ## gradient pression adim (Bo^-1)  : " << dpdz << endl;
cout << " ## Volume                          : " << Vol << endl;
cout << " ## Volume / Volume cyl             : " << Vol/(pi*L*Rbase^2) << endl;
cout << " ## Courbure                        : " << K0 << endl;
cout << " ## SURFACE                         : " << Area << endl;
cout << " ## Rmax                            : " << Rmax << endl;
cout << " ## Rmin                            : " << Rmin << endl;
cout << " ## Zmax                            : " << Zmax << endl;
cout << " ## Zmin                            : " << Zmin << endl;
cout << endl;


// fichier info geom
{
ofstream fileG("Infos_GeomNabil.txt");
fileG.scientific;
fileG << L << " " ; 
fileG << Vol/(pi*L*Rbase^2) << " " ;
fileG << K0 << " " ; 
fileG << dpdz << " " ;
fileG << Area << " ";
fileG << Zmin << " " ; 
fileG << Zmax << " " ; 
fileG << Rmin << " " ; 
fileG << Rmax << " ";
fileG <<  endl ; 
fileG << "### Infos geometrie : L Vol' K0 dpdz Area Zmin Zmax Rmin Rmax" << endl;
};







cout << endl << "The end..." << endl << endl;
